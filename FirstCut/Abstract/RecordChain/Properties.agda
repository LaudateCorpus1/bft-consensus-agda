open import Hash
open import BasicTypes
open import Lemmas
open import Prelude

open import Data.Nat.Properties

module Abstract.RecordChain.Properties {f : ‚Ñï} (ec : EpochConfig f)
  -- A Hash function maps a bytestring into a hash.
  (hash    : ByteString ‚Üí Hash)
  -- And is colission resistant
  (hash-cr : ‚àÄ{x y} ‚Üí hash x ‚â° hash y ‚Üí Collision hash x y ‚äé x ‚â° y)
   where

 open WithCryptoHash                      hash hash-cr
 open import Abstract.Records          ec hash hash-cr
 open import Abstract.RecordChain      ec hash hash-cr
 open import Abstract.RecordStoreState ec hash hash-cr

 module ForRSS 
      (curr : RecordStoreState) 
      (increasing-round-rule : Invariants.IncreasingRoundRule curr)
      (votes-only-once-rule  : Invariants.VotesOnlyOnceRule   curr)
      (locked-round-rule     : Invariants.LockedRoundRule     curr)
     where

   open WithPool (_‚àà pool curr)

   module WithBFT 
      (lemmaB1 : (q‚ÇÅ : QC)(q‚ÇÇ : QC) 
               ‚Üí ‚àÉ[ a ] (a ‚ààQC q‚ÇÅ √ó a ‚ààQC q‚ÇÇ √ó Honest {ec = ec} a))
     where

    ----------------------
    -- Lemma 2


    -- TODO: When we bring in the state everywhere; this will remain very similar.
    --       We will add another check for st‚ÇÄ ‚âüState st‚ÇÅ after checking the block
    --       equality in (***); Naturally, if blocks are equal so is the state.
    --       We will need some command-application-injective lemma.
    --
    --         1) when st‚ÇÄ ‚âüState st‚ÇÅ returns yes, we done.
    --         2) when it returns no, and the blocks are different, no problem.
    --         3) when it returns no and the blocks are equal, its impossible! HashBroke!
    lemmaS2 : {q‚ÇÄ q‚ÇÅ : QC}
            ‚Üí (rc‚ÇÄ : RecordChain (Q q‚ÇÄ)) 
            ‚Üí (rc‚ÇÅ : RecordChain (Q q‚ÇÅ)) 
            ‚Üí bRound (prevBlock rc‚ÇÄ) ‚â° bRound (prevBlock rc‚ÇÅ)
            ‚Üí HashBroke ‚äé prevBlock rc‚ÇÄ ‚â° prevBlock rc‚ÇÅ -- √ó qState q‚ÇÄ ‚â° qState q‚ÇÅ
    lemmaS2 {q‚ÇÄ} {q‚ÇÅ} (step {r = B b‚ÇÄ} rc‚ÇÄ (B‚ÜêQ h‚ÇÄ) (ValidQC .rc‚ÇÄ refl) {pa}) 
                      (step {r = B b‚ÇÅ} rc‚ÇÅ (B‚ÜêQ h‚ÇÅ) (ValidQC .rc‚ÇÅ refl) {pb}) hyp 
      with b‚ÇÄ ‚âüBlock b‚ÇÅ -- (***)
    ...| yes done = inj‚ÇÇ done
    ...| no  imp  
      with lemmaB1 q‚ÇÄ q‚ÇÅ
    ...|  (a , (a‚ààq‚ÇÄ , a‚ààq‚ÇÅ , honest)) 
      with <-cmp (vOrder (‚ààQC-Vote {q‚ÇÄ} a a‚ààq‚ÇÄ)) (vOrder (‚ààQC-Vote {q‚ÇÅ} a a‚ààq‚ÇÅ))
    ...| tri< va<va' _ _ 
      with increasing-round-rule a honest {q‚ÇÄ} (step rc‚ÇÄ (B‚ÜêQ h‚ÇÄ) (ValidQC rc‚ÇÄ refl) {pa}) a‚ààq‚ÇÄ 
                                          {q‚ÇÅ} (step rc‚ÇÅ (B‚ÜêQ h‚ÇÅ) (ValidQC rc‚ÇÅ refl) {pb}) a‚ààq‚ÇÅ 
                                          va<va'
    ...| res = ‚ä•-elim (<‚áí‚â¢ res hyp)
    lemmaS2 {q‚ÇÄ} {q‚ÇÅ} (step {r = B b‚ÇÄ} rc‚ÇÄ (B‚ÜêQ h‚ÇÄ) (ValidQC .rc‚ÇÄ refl) {pa})
                      (step {r = B b‚ÇÅ} rc‚ÇÅ (B‚ÜêQ h‚ÇÅ) (ValidQC .rc‚ÇÅ refl) {pb}) hyp 
       | no imp
       |  (a , (a‚ààq‚ÇÄ , a‚ààq‚ÇÅ , honest)) 
       | tri> _ _ va'<va 
      with increasing-round-rule a honest {q‚ÇÅ} (step rc‚ÇÅ (B‚ÜêQ h‚ÇÅ) (ValidQC rc‚ÇÅ refl) {pb}) a‚ààq‚ÇÅ  
                                          {q‚ÇÄ} (step rc‚ÇÄ (B‚ÜêQ h‚ÇÄ) (ValidQC rc‚ÇÄ refl) {pa}) a‚ààq‚ÇÄ  
                                          va'<va
    ...| res = ‚ä•-elim (<‚áí‚â¢ res (sym hyp))
    lemmaS2 {q‚ÇÄ} {q‚ÇÅ} (step {r = B b‚ÇÄ} rc‚ÇÄ (B‚ÜêQ h‚ÇÄ) (ValidQC .rc‚ÇÄ refl) {pa}) 
                      (step {r = B b‚ÇÅ} rc‚ÇÅ (B‚ÜêQ h‚ÇÅ) (ValidQC .rc‚ÇÅ refl) {pb}) hyp 
       | no imp
       |  (a , (a‚ààq‚ÇÄ , a‚ààq‚ÇÅ , honest)) 
       | tri‚âà _ va‚â°va' _ 
      with votes-only-once-rule a honest {q‚ÇÄ} (step rc‚ÇÄ (B‚ÜêQ h‚ÇÄ) (ValidQC rc‚ÇÄ refl) {pa}) a‚ààq‚ÇÄ  
                                         {q‚ÇÅ} (step rc‚ÇÅ (B‚ÜêQ h‚ÇÅ) (ValidQC rc‚ÇÅ refl) {pb}) a‚ààq‚ÇÅ 
                                         va‚â°va'
    ...| res = inj‚ÇÅ ((encodeR (B b‚ÇÄ) , encodeR (B b‚ÇÅ)) , (imp ‚àò B-inj ‚àò encodeR-inj) 
                     , trans h‚ÇÄ {!!}) -- extract from h‚ÇÅ, res and qVotes-C3!


    ----------------
    -- Lemma S3

    -- We just noted that when the paper mentions 'certified' or ' verified'
    -- block, we encode it as a 'RecordChain' ending in said block.   
    lemmaS3 : ‚àÄ{r‚ÇÇ}{rc : RecordChain r‚ÇÇ}
            ‚Üí (c3 : ùïÇ-chain 3 rc)          -- This is B‚ÇÄ ‚Üê C‚ÇÄ ‚Üê B‚ÇÅ ‚Üê C‚ÇÅ ‚Üê B‚ÇÇ ‚Üê C‚ÇÇ in S3
            ‚Üí {q' : QC}
            ‚Üí (certB : RecordChain (Q q')) -- Immediatly before a (Q q), we have the certified block (B b), which is the 'B' in S3
            ‚Üí round r‚ÇÇ < qRound q'
            ‚Üí bRound (kchainBlock (suc (suc zero)) c3) ‚â§ prevRound certB 
    lemmaS3 {r} (s-chain {rc = rc} {b = b‚ÇÇ} {q‚ÇÇ} r‚Üêb‚ÇÇ {pb} vb‚ÇÇ b‚ÇÇ‚Üêq‚ÇÇ {pq} vq‚ÇÇ c2) {q'} (step certB b‚Üêq' vq' {pq'}) hyp 
      with lemmaB1 q‚ÇÇ q'
    ...| (a , (a‚ààq‚ÇÇ , a‚ààq' , honest)) 
      -- TODO: We have done a similar reasoning on the order of votes on lemmaS2; This is cumbersome
      -- and error prone. We should factor out a predicate that analyzes the rounds of QC's and
      -- returns us a judgement about the order of the votes.
      with <-cmp (vOrder (‚ààQC-Vote {q‚ÇÇ} a a‚ààq‚ÇÇ)) (vOrder (‚ààQC-Vote {q'} a a‚ààq'))
    ...| tri> _ _ va'<va‚ÇÇ 
      with increasing-round-rule a honest (step certB b‚Üêq' vq' {pq'})           a‚ààq' 
                                          (step (step rc r‚Üêb‚ÇÇ vb‚ÇÇ {pb}) b‚ÇÇ‚Üêq‚ÇÇ vq‚ÇÇ {pq}) a‚ààq‚ÇÇ 
                                          va'<va‚ÇÇ 
    ...| res = ‚ä•-elim (n‚âÆn (qRound q') (‚â§-trans res (‚â§-unstep hyp)))
    lemmaS3 {r} (s-chain {rc = rc} {b = b‚ÇÇ} {q‚ÇÇ} r‚Üêb‚ÇÇ {pb} vb‚ÇÇ b‚ÇÇ‚Üêq‚ÇÇ {pq} vq‚ÇÇ c2) {q'} (step certB b‚Üêq' vq' {pq'}) hyp 
       | (a , (a‚ààq‚ÇÇ , a‚ààq' , honest)) 
       | tri‚âà _ va‚ÇÇ‚â°va' _ 
      with votes-only-once-rule a honest (step (step rc r‚Üêb‚ÇÇ vb‚ÇÇ {pb}) b‚ÇÇ‚Üêq‚ÇÇ vq‚ÇÇ {pq}) a‚ààq‚ÇÇ 
                                         (step certB b‚Üêq' vq' {pq'})               a‚ààq'
                                         va‚ÇÇ‚â°va'
    ...| res = {!!} -- res tells me both votes are the same; hyp tells
                    -- me the rounds of the QC's are different; 
                    -- votes can't be the same.
    lemmaS3 {r} (s-chain {rc = rc} {b = b‚ÇÇ} {q‚ÇÇ} r‚Üêb‚ÇÇ {pb} vb‚ÇÇ b‚ÇÇ‚Üêq‚ÇÇ {pq} vq‚ÇÇ c2) {q'} (step certB b‚Üêq' vq' {pq'}) hyp 
       | (a , (a‚ààq‚ÇÇ , a‚ààq' , honest)) 
       | tri< va‚ÇÇ<va' _ _ 
      with b‚Üêq' 
    ...| B‚ÜêQ xxx 
       with locked-round-rule a honest {q‚ÇÇ} (s-chain r‚Üêb‚ÇÇ {pb} vb‚ÇÇ b‚ÇÇ‚Üêq‚ÇÇ {pq} vq‚ÇÇ c2) a‚ààq‚ÇÇ {q'} (step certB (B‚ÜêQ xxx) vq' {{!!}}) a‚ààq' va‚ÇÇ<va'
    ...| res = ‚â§-trans (kchainBlockRound‚â§ zero (suc zero) c2 z‚â§n) res

   ------------------
   -- Proposition S4

   propS4 :  ‚àÄ{r}{rc : RecordChain r}
          ‚Üí (c3 : ùïÇ-chain-contigR 3 rc) -- This is B‚ÇÄ ‚Üê C‚ÇÄ ‚Üê B‚ÇÅ ‚Üê C‚ÇÅ ‚Üê B‚ÇÇ ‚Üê C‚ÇÇ in S4
          ‚Üí {q : QC}
          ‚Üí (certB : RecordChain (Q q))
          ‚Üí bRound (kchainBlock (suc (suc zero)) (ùïÇ-chain-contigR-ùì§ c3)) < qRound q
          -- In the paper, the proposition states that B‚ÇÄ ‚Üê‚ãÜ B, yet, B is the block preceding
          -- C, which in our case is 'prevBlock certB'. Hence, to say that B‚ÇÄ ‚Üê‚ãÜ B is
          -- to say that B‚ÇÄ is a block in the RecordChain that goes all the way to C.
          ‚Üí B (kchainBlock (suc (suc zero)) (ùïÇ-chain-contigR-ùì§ c3)) ‚ààRC certB
   propS4 c3 certB b‚Üêq = {!!}
