{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.

   Copyright (c) 2020 Oracle and/or its affiliates.
   Licensed under the Universal Permissive License v 1.0 as shown at https://opensource.oracle.com/licenses/upl
-}
{-# OPTIONS --allow-unsolved-metas #-}
open import Optics.All
open import LibraBFT.Lemmas
open import LibraBFT.Prelude
open import LibraBFT.Base.PKCS

open import LibraBFT.Impl.Consensus.Types
open import LibraBFT.Impl.NetworkMsg
open import LibraBFT.Impl.Util.Crypto
open import LibraBFT.Impl.Properties.Aux

open import LibraBFT.Concrete.System impl-sps-avp
open import LibraBFT.Concrete.System.Parameters
import      LibraBFT.Concrete.Properties.VotesOnce as VO

open import LibraBFT.Yasm.AvailableEpochs as AE
open import LibraBFT.Yasm.Base
open import LibraBFT.Yasm.System     ConcSysParms
open import LibraBFT.Yasm.Properties ConcSysParms
open        Structural impl-sps-avp

open import LibraBFT.Concrete.Obligations

-- In this module, we (will) prove the two implementation obligations for the VotesOnce rule.  Note
-- that it is not yet 100% clear that the obligations are the best definitions to use.  See comments
-- in Concrete.VotesOnce.  We will want to prove these obligations for the fake/simple
-- implementation (or some variant on it) and streamline the proof before we proceed to tacke more
-- ambitious properties.

module LibraBFT.Impl.Properties.VotesOnce where

  postulate  -- TODO : prove
    newVoteSameEpochGreaterRound : ‚àÄ {e pid ùìîs pool ms s s' outs v m pk ps}
                                 ‚Üí StepPeerState {e} pid ùìîs pool ms s' outs
                                 ‚Üí ms ‚â° just s
                                 ‚Üí v  ‚äÇMsg m ‚Üí m ‚àà outs ‚Üí (sig : WithVerSig pk v)
                                 ‚Üí ¬¨ MsgWithSig‚àà pk (ver-signature sig) pool
                                 ‚Üí (v ^‚àô vEpoch) ‚â° (‚ÇãepEC ps) ^‚àô epEpoch
                                 √ó (‚ÇãepEC s) ^‚àô epLastVotedRound < (v ^‚àô vRound)  -- New votes are for higher round than lastVotedRound in pre-state

    noEpochChangeYet : ‚àÄ {e pid ùìîs pool outs ps' ps}
                     ‚Üí StepPeerState {e} pid ùìîs pool (just ps') ps outs
                     ‚Üí (‚ÇãepEC ps) ^‚àô epEpoch ‚â° (‚ÇãepEC ps') ^‚àô epEpoch

    lastVoteRound-mono : ‚àÄ {e pid ùìîs pool outs ps' ps}
                       ‚Üí StepPeerState {e} pid ùìîs pool (just ps') ps outs
                       ‚Üí (‚ÇãepEC ps') ^‚àô epEpoch ‚â° (‚ÇãepEC ps) ^‚àô epEpoch  -- Always true, so far, as no epoch changes.
                       ‚Üí (‚ÇãepEC ps') ^‚àô epLastVotedRound ‚â§ (‚ÇãepEC ps) ^‚àô epLastVotedRound

    noMsgsByUninitialised : ‚àÄ {e} {st : SystemState e} {pid} {m}
                          ‚Üí ReachableSystemState st
                          ‚Üí (pid , m) ‚àà msgPool st
                          ‚Üí Is-just (Map-lookup pid (peerStates st))

  firstSendEstablishes : Vote ‚Üí PK ‚Üí SystemStateRel Step
  firstSendEstablishes _ _ (step-epoch _) = ‚ä• 
  firstSendEstablishes _ _ (step-peer (step-cheat _ _)) = ‚ä•
  firstSendEstablishes v' pk {e} {.e} sysStep@(step-peer {pid = pid} {pre = pre} pstep@(step-honest {st = pst} {outs} _)) =
    let post = StepPeer-post pstep
     in Map-lookup pid (peerStates post) ‚â° just pst
      √ó Œ£ (IsValidNewPart (‚ÇãvSignature v') pk sysStep)
          Œª ivnp ‚Üí let (_ , (_ , vpb)) = ivnp
                    in ( EpochConfig.toNodeId (vp-ec vpb) (vp-member vpb) ‚â° pid)
                       √ó ‚àÉ[ v ] ( v ^‚àô vEpoch < e
                                √ó v ^‚àô vRound ‚â§ (‚ÇãepEC pst) ^‚àô epLastVotedRound
                                √ó Œ£ (WithVerSig pk v)
                                    Œª vsig ‚Üí (ver-signature vsig ‚â° ‚ÇãvSignature v'))

  postulate -- TODO-2: prove

    -- Given a PK

    isValidNewPart‚áífSE : ‚àÄ {e e' pk v'}{pre : SystemState e} {post : SystemState e'} {theStep : Step pre post}
                     ‚Üí IsValidNewPart (‚ÇãvSignature v') pk theStep
                     ‚Üí firstSendEstablishes v' pk theStep

    whatWeWant : ‚àÄ {e e' e'' v' pk}{pre : SystemState e} {post : SystemState e'}{final : SystemState e''} {theStep : Step pre post}
               ‚Üí firstSendEstablishes v' pk theStep
               ‚Üí Step* post final
               ‚Üí Œ£ (ValidPartForPK (availEpochs final) v' pk)
                   Œª vpf ‚Üí Œ£ (Is-just (Map-lookup (EpochConfig.toNodeId (vp-ec vpf) (vp-member vpf)) (peerStates final)))
                           Œª ij ‚Üí v' ^‚àô vRound ‚â§ (‚ÇãepEC (to-witness ij)) ^‚àô epLastVotedRound

  vo‚ÇÅ-unwind2 : VO.ImplObligation‚ÇÅ
  -- Initialization doesn't send any messages at all so far.  In future it may send messages, but
  -- probably not containing Votes?
  vo‚ÇÅ-unwind2 r (step-init _ eff) _ _ m‚ààouts _ _ _ _ _ _ _ _ rewrite cong proj‚ÇÇ eff = ‚ä•-elim (¬¨Any[] m‚ààouts)
  vo‚ÇÅ-unwind2 {e} {pid} {pk = pk} {pre = pre} r (step-msg {s = ps} m‚ààpool ps‚â° xx) {v' = v'} {m' = m'} hpk v‚äÇm m‚ààouts sig ¬¨sentb4 vpb v'‚äÇm' m'‚ààpool sig' eIds‚â° rnds‚â°
     with Any-Step-elim (whatWeWant {v' = v'} {pk})
                        (Any-Step-‚áí (Œª _ ivnp ‚Üí isValidNewPart‚áífSE ivnp)
                                    (unwind r hpk v'‚äÇm' m'‚ààpool sig'))
  ...| vpf' , ij , v'rnd‚â§lvr
     with newVoteSameEpochGreaterRound {e} {pid} {availEpochs pre} {ps = ps} (step-msg m‚ààpool ps‚â° xx) ps‚â° v‚äÇm m‚ààouts sig ¬¨sentb4
  ...| eIds‚â°' , rnd> = ‚ä•-elim ((<‚áí‚â¢ rnd>) (sym (‚â§-antisym (‚â§-trans (‚â§-reflexive rnds‚â°) (‚â§-trans v'rnd‚â§lvr (‚â§-reflexive (cong (_^‚àô epLastVotedRound) (cong ‚ÇãepEC (sameECs (to-witness ij) ps)))))) (‚â§-pred (‚â§-step rnd>)))))
                       where postulate -- TODO: temporary, need to eliminate
                               sameECs : ‚àÄ (ep1 ep2 : EventProcessor) ‚Üí ep1 ‚â° ep2

  postulate  -- TODO : prove
    vo‚ÇÇ : VO.ImplObligation‚ÇÇ
