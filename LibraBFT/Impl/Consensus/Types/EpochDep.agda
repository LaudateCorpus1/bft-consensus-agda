{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.

   Copyright (c) 2020 Oracle and/or its affiliates.
   Licensed under the Universal Permissive License v 1.0 as shown at https://opensource.oracle.com/licenses/upl
-}
open import LibraBFT.Prelude
open import LibraBFT.Lemmas
open import LibraBFT.Hash
open import LibraBFT.Base.PKCS
open import LibraBFT.Base.Encode
open import LibraBFT.Base.KVMap as KVMap

open import LibraBFT.Impl.Util.Crypto
open import LibraBFT.Impl.Consensus.Types.EpochIndep

open import Optics.All

-- This module defines the types that depend on an EpochConfig,
-- but never inspect it. Consequently, we define everyting over
-- an abstract ùìî passed around as a module parameter.
--
-- Importantly, though, we are connecting abstract and concrete
-- votes by defining what constitutes enough "evidence" that a
-- vote was cast, which is passed around in the abstract model as
-- the variable (ùì• : VoteEvidence); here we instantiate it to
-- 'ConcreteVoteEvidence'.
--
-- TODO-3: update types to reflect more recent version of LibraBFT.
-- This is a substantial undertaking that should probably be led by
-- someone who can access our internal implementation.
--
-- TODO-4: Make the Optics.Reflection stuff work with record
-- parameters, so we can merge all modules back into Types.  For
-- now, this is the easiest way to avoid the issue that making a
-- module inside Consensus.Types called EpochDep will break
-- mkLens (not sure why).
module LibraBFT.Impl.Consensus.Types.EpochDep (ùìî : EpochConfig) where
  open EpochConfig ùìî

  -- Blocks and QCs are identified by hashes. In particular;
  -- Blocks are identified by their hash and QCs are identified
  -- by the hash of the block they certify.
  --
  -- This really means that two QCs that certify the same block
  -- are (by definition!!) the same. We capture this in the
  -- abstract model by using the _‚âàRec_ relation.
  UID :  Set
  UID = Hash

  _‚âüUID_ : (u‚ÇÄ u‚ÇÅ : UID) ‚Üí Dec (u‚ÇÄ ‚â° u‚ÇÅ)
  _‚âüUID_ = _‚âüHash_

  -- A 'ConcreteVoteEvidence' is a piece of information that
  -- captures that the 'vd : AbsVoteData' in question was not /invented/
  -- but instead, comes from a concrete vote that is /valid/ (that is,
  -- signature has been checked and author belongs to this epoch).
  --
  -- Moreover, we will also store the RecordChain that leads to the vote;
  -- this requires some mutually-recursive shenanigans, so we first declare
  -- ConcreteVoteEvidence, then import the necessary modules, and then define it.
  record ConcreteVoteEvidence (vd : AbsVoteData ùìî UID) : Set

  import LibraBFT.Abstract.Records              ùìî UID _‚âüUID_ ConcreteVoteEvidence
    as Abs
  open import LibraBFT.Abstract.Records.Extends ùìî UID _‚âüUID_ ConcreteVoteEvidence
  open import LibraBFT.Abstract.RecordChain     ùìî UID _‚âüUID_ ConcreteVoteEvidence

  data VoteCoherence (v : Vote) (b : Abs.Block) : Set where
    initial  : v ^‚àô vParentId    ‚â° genesisUID
             ‚Üí v ^‚àô vParentRound ‚â° 0
             ‚Üí Abs.bPrevQC b     ‚â° nothing
             ‚Üí VoteCoherence v b

    ¬¨initial : ‚àÄ{b' q}
             ‚Üí v ^‚àô vParentId    ‚â¢ genesisUID
             ‚Üí v ^‚àô vParentRound ‚â¢ 0
             ‚Üí v ^‚àô vParentId    ‚â° Abs.bId b'
             ‚Üí v ^‚àô vParentRound ‚â° Abs.bRound b'
             ‚Üí (Abs.B b') ‚Üê (Abs.Q q)
             ‚Üí (Abs.Q q)  ‚Üê (Abs.B b)
             ‚Üí VoteCoherence v b

  -- Estabilishing validity of a concrete vote involves checking:
  --
  --   i) Vote author belongs to the current epoch
  --  ii) Vote signature is correctly verified
  -- iii) Existence of a RecordChain up to the voted-for block.
  --  iv) Coherence of 'vdParent' field with the above record chain.
  --
  record IsValidVote (v : Vote) : Set where
    constructor mkIsValidVote
    inductive
    field
      ‚ÇãivvMember   : Member
      ‚ÇãivvAuthor   : isMember? (‚ÇãvAuthor v) ‚â° just ‚ÇãivvMember
      ‚ÇãivvSigned   : WithVerSig (getPubKey ‚ÇãivvMember) v

      ‚ÇãivvVDhash   : v ^‚àô vLedgerInfo ‚àô liConsensusDataHash ‚â° hashVD (v ^‚àô vVoteData)

      -- A valid vote must vote for a block that exists and is
      -- inserted in a RecordChain.
      ‚ÇãivvBlock    : Abs.Block
      ‚ÇãivvBlockId  : v ^‚àô vProposedId ‚â° Abs.bId ‚ÇãivvBlock

      -- Moreover; we must check that the 'parent' field of the vote is coherent.
      ‚ÇãivvCoherent : VoteCoherence v ‚ÇãivvBlock

      -- Finally, the vote is for the correct epoch
      ‚ÇãivvEpoch    : v ^‚àô vEpoch ‚â° epochId
      ‚ÇãivvEpoch2   : v ^‚àô vParent ‚àô biEpoch ‚â° epochId  -- Not needed?
  open IsValidVote public

  -- A valid vote can be directly mapped to an AbsVoteData. Abstraction of QCs
  -- and blocks will be given in LibraBFT.Concrete.Records, since those are
  -- more involved functions.
  Œ±-ValidVote : (v : Vote) ‚Üí Member ‚Üí AbsVoteData ùìî UID
  Œ±-ValidVote v mbr = mkAbsVoteData (v ^‚àô vProposed ‚àô biRound)
                                     mbr
                                     (v ^‚àô vProposed ‚àô biId)

  -- Œ±-ValidVote is the same for two votes that have the same vAuthor, vdProposed and vOrder
  Œ±-ValidVote-‚â° : ‚àÄ {cv v'} {m : Member}
                ‚Üí ‚ÇãvdProposed (‚ÇãvVoteData cv) ‚â° ‚ÇãvdProposed (‚ÇãvVoteData v')
                ‚Üí Œ±-ValidVote cv m ‚â° Œ±-ValidVote v' m
  Œ±-ValidVote-‚â° {cv} {v'} prop‚â° =
    AbsVoteData-Œ∑ (cong ‚ÇãbiRound prop‚â°) refl (cong ‚ÇãbiId prop‚â°)

  -- Finally; evidence for some abstract vote consists of a concrete valid vote
  -- that is coherent with the abstract vote data.
  record ConcreteVoteEvidence vd where
    constructor mkCVE
    inductive
    field
      ‚ÇãcveVote        : Vote
      ‚ÇãcveIsValidVote : IsValidVote ‚ÇãcveVote
      ‚ÇãcveIsAbs       : Œ±-ValidVote ‚ÇãcveVote (‚ÇãivvMember ‚ÇãcveIsValidVote) ‚â° vd
  open ConcreteVoteEvidence public

  -- Gets the signature of a concrete vote evidence
  ‚ÇãcveSignature : ‚àÄ{vd} ‚Üí ConcreteVoteEvidence vd ‚Üí Signature
  ‚ÇãcveSignature = ‚ÇãvSignature ‚àò ‚ÇãcveVote

  -- A valid quorum certificate is a collection of at least QSize valid votes
  -- cast by different authors.
  record IsValidQC (qc : QuorumCert) : Set where
    field
      ‚ÇãivqcSizeOk          : QSize ‚â§ length (qcVotes qc)
      ‚ÇãivqcAuthorsDistinct : allDistinct (List-map (isMember? ‚àò proj‚ÇÅ) (qcVotes qc)) -- TODO-2: consider using the sortedBy _<_ trick; might be simpler.
      ‚ÇãivqcVotesValid      : All (IsValidVote ‚àò rebuildVote qc) (qcVotes qc)
  open IsValidQC public

  vqcMember : (qc : QuorumCert) ‚Üí IsValidQC qc
             ‚Üí ‚àÄ {as} ‚Üí as ‚àà qcVotes qc ‚Üí Member
  vqcMember qc v {Œ± , _ , _} as‚ààqc with All-lookup (‚ÇãivqcVotesValid v) as‚ààqc
  ...| prf = ‚ÇãivvMember prf

  -- A block tree depends on a epoch config but works regardlesss of which
  -- EpochConfig we have.
  record BlockTree : Set where
    constructor mkBlockTree
    field
      ‚ÇãbtIdToBlock               : KVMap HashValue LinkableBlock
      ‚ÇãbtRootId                  : HashValue
      ‚ÇãbtHighestCertifiedBlockId : HashValue
      ‚ÇãbtHighestQuorumCert       : QuorumCert
      -- btHighestTimeoutCert      : Maybe TimeoutCertificate
      ‚ÇãbtHighestCommitCert       : QuorumCert
      ‚ÇãbtPendingVotes            : PendingVotes
      ‚ÇãbtPrunedBlockIds          : List HashValue
      ‚ÇãbtMaxPrunedBlocksInMem    : ‚Ñï
      ‚ÇãbtIdToQuorumCert          : KVMap HashValue (Œ£ QuorumCert IsValidQC)
  open BlockTree public
  unquoteDecl btIdToBlock   btRootId   btHighestCertifiedBlockId   btHighestQuorumCert
              btHighestCommitCert   btPendingVotes   btPrunedBlockIds
              btMaxPrunedBlocksInMem btIdToQuorumCert = mkLens (quote BlockTree)
             (btIdToBlock ‚à∑ btRootId ‚à∑ btHighestCertifiedBlockId ‚à∑ btHighestQuorumCert ‚à∑
              btHighestCommitCert ‚à∑ btPendingVotes ‚à∑ btPrunedBlockIds ‚à∑
              btMaxPrunedBlocksInMem ‚à∑ btIdToQuorumCert ‚à∑ [])

  record BlockStore : Set where
    constructor mkBlockStore
    field
      ‚ÇãbsInner         : BlockTree
      -- bsStateComputer : StateComputer
      -- bsStorage       : CBPersistentStorage
  open BlockStore public
  unquoteDecl bsInner = mkLens (quote BlockStore)
             (bsInner ‚à∑ [])

  -- These are the parts of the EventProcessor that depend on an
  -- EpochConfig. We do not particularly care which EpochConfig
  -- they care about yet.
  --
  record EventProcessorWithEC : Set where
    constructor mkEventProcessorWithEC
    field
      ‚ÇãepBlockStore   : BlockStore
  open EventProcessorWithEC public
  unquoteDecl epBlockStore = mkLens (quote EventProcessorWithEC)
    (epBlockStore ‚à∑ [])

  lBlockTree : Lens EventProcessorWithEC BlockTree
  lBlockTree = epBlockStore ‚àô bsInner
