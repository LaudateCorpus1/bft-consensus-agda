{-# OPTIONS --allow-unsolved-metas #-}
open import LibraBFT.Prelude
open import LibraBFT.Hash
open import LibraBFT.BasicTypes
open import LibraBFT.Lemmas

open import LibraBFT.Abstract.EpochConfig

module LibraBFT.Abstract.RecordChain {f : ‚Ñï} (ec : EpochConfig f)
  -- A Hash function maps a bytestring into a hash.
  (hash     : ByteString ‚Üí Hash)
  -- And is colission resistant
  (hash-cr  : ‚àÄ{x y} ‚Üí hash x ‚â° hash y ‚Üí Collision hash x y ‚äé x ‚â° y)
    where

 open import LibraBFT.Abstract.Records          ec 
 open        WithCryptoHash                        hash hash-cr
 open import LibraBFT.Abstract.Records.Extends  ec hash hash-cr
 open import LibraBFT.Abstract.RecordStoreState ec hash hash-cr

 module WithRSS
   {a}{RSS : Set a}
   -- The current record pool; abstracted by saying
   -- whether a record is in the pool or not.
   (isRSS : isRecordStoreState RSS)
     where

  IsInPool : Record ‚Üí Set
  IsInPool r = isInPool isRSS r

  IsInPool-irrelevant : ‚àÄ{r}(p‚ÇÄ p‚ÇÅ : IsInPool r) ‚Üí p‚ÇÄ ‚â° p‚ÇÅ
  IsInPool-irrelevant = isInPool-irrelevant isRSS

  -- A record chain is a slice of the reflexive transitive closure with
  -- valid records only. Validity, in turn, is defined by recursion on the
  -- chain.

  -- One way of looking at a 'RecordChain r' is to think of it as 
  -- one path from the epoch's initial record to r.
  data RecordChain : Record ‚Üí Set‚ÇÅ

  data Valid : ‚àÄ {r} ‚Üí RecordChain r ‚Üí Record ‚Üí Set‚ÇÅ

  data RecordChain where
    empty : ‚àÄ {h·µ¢} ‚Üí RecordChain (I h·µ¢)
    step  : ‚àÄ {r r'}
          ‚Üí (rc : RecordChain r) 
          ‚Üí r ‚Üê r'
          ‚Üí Valid rc r' 
          ‚Üí {prf : IsInPool r'} 
          ‚Üí RecordChain r'

  data Valid where
    ValidBlockInit : {b : Block} {h·µ¢ : Initial} 
                   ‚Üí 1 ‚â§ bRound b ‚Üí Valid (empty {h·µ¢}) (B b)
    ValidBlockStep : {b : Block} {q : QC}
                   ‚Üí (rc : RecordChain (Q q))
                   ‚Üí qRound (qBase q) < bRound b
                   ‚Üí Valid rc (B b)
    ValidQC        : {q : QC} {b : Block}
                   ‚Üí (rc : RecordChain (B b))
                   ‚Üí qRound (qBase q) ‚â° bRound b
                   ‚Üí Valid rc (Q q)

  ValidQ‚áíRound‚â° : ‚àÄ{b}{certB : RecordChain (B b)}{q : QC}
                ‚Üí Valid certB (Q q)
                ‚Üí qRound (qBase q) ‚â° bRound b   
  ValidQ‚áíRound‚â° (ValidQC certB x) = x

  prevBlock : ‚àÄ{q} ‚Üí RecordChain (Q q) ‚Üí Block
  prevBlock (step {r = B b} _ (B‚ÜêQ _) _) = b

  -- Defition of 'previous_round' as in Paper Section 5.5
  currRound : ‚àÄ{r} ‚Üí RecordChain r ‚Üí Round
  currRound empty = 0
  currRound (step {r = r} _ _ _) = round r

  -- TODO: prev round should be defined for blocks only...
  prevRound : ‚àÄ{r} ‚Üí RecordChain r ‚Üí Round
  prevRound empty = 0
  prevRound (step rc (I‚ÜêB x) vr) = 0
  prevRound (step rc (Q‚ÜêB x) vr) = currRound rc
  prevRound (step rc (B‚ÜêQ x) vr) = prevRound rc

  -- A k-chain (paper Section 5.2) is a sequence of
  -- blocks and quorum certificates for said blocks:
  --
  --  B‚ÇÄ ‚Üê C‚ÇÄ ‚Üê B‚ÇÅ ‚Üê C‚ÇÅ ‚Üê ‚ãØ ‚Üê B‚Çñ ‚Üê C‚Çñ
  --
  -- Our datatype ùïÇ-chain captures exactly that structure.
  --
  data ùïÇ-chain (P : Record ‚Üí Record ‚Üí Set) : (k : ‚Ñï){r : Record} ‚Üí RecordChain r ‚Üí Set‚ÇÅ where
    0-chain : ‚àÄ{r}{rc : RecordChain r} ‚Üí ùïÇ-chain P 0 rc
    s-chain : ‚àÄ{k r}{rc : RecordChain r}{b : Block}{q : QC}
            ‚Üí (r‚Üêb : r   ‚Üê B b)
            ‚Üí {prfB : IsInPool (B b)}
            ‚Üí (vb  : Valid rc (B b))
            ‚Üí (prf : P r (B b))
            ‚Üí (b‚Üêq : B b ‚Üê Q q)
            ‚Üí {prfQ : IsInPool (Q q)}
            ‚Üí (vq  : Valid (step rc r‚Üêb vb {prfB}) (Q q))
            ‚Üí ùïÇ-chain P k rc
            ‚Üí ùïÇ-chain P (suc k) (step (step rc r‚Üêb vb {prfB}) b‚Üêq vq {prfQ})

  -- Returns the round of the block heading the k-chain.
  kchainHeadRound : ‚àÄ{k r P}{rc : RecordChain r} ‚Üí ùïÇ-chain P k rc ‚Üí Round
  kchainHeadRound (0-chain {r = r})            = round r
  kchainHeadRound (s-chain r‚Üêb vb _ b‚Üêq vq kk) = kchainHeadRound kk

  kchainBlock : ‚àÄ{k r P}{rc : RecordChain r} ‚Üí Fin k ‚Üí ùïÇ-chain P k rc ‚Üí Block
  kchainBlock zero    (s-chain {b = b} _ _ _ _ _ _) = b
  kchainBlock (suc x) (s-chain r‚Üêb vb _ b‚Üêq vq kk)  = kchainBlock x kk

  kchainQC : ‚àÄ{k r P}{rc : RecordChain r} ‚Üí Fin k ‚Üí ùïÇ-chain P k rc ‚Üí QC
  kchainQC zero    (s-chain {q = q} _ _ _ _ _ _) = q
  kchainQC (suc x) (s-chain r‚Üêb vb _ b‚Üêq vq kk)  = kchainQC x kk

  -- TODO: These guys go away, much better to have just one ùïÇ-chain type.
  _‚ü¶_‚üßck : ‚àÄ{k r P}{rc : RecordChain r} ‚Üí ùïÇ-chain P k rc ‚Üí Fin k ‚Üí Block
  chain ‚ü¶ ix ‚üßck = kchainBlock ix chain

  _‚ü¶_‚üßck' : ‚àÄ{k r P}{rc : RecordChain r} ‚Üí ùïÇ-chain P k rc ‚Üí Fin k ‚Üí QC
  chain ‚ü¶ ix ‚üßck' = kchainQC ix chain

  kchainBlockRound‚â§ : ‚àÄ{k r P}{rc : RecordChain r}(x y : Fin k)(kc : ùïÇ-chain P k rc)
                    ‚Üí x ‚â§Fin y ‚Üí bRound (kchainBlock y kc) ‚â§ bRound (kchainBlock x kc)
  kchainBlockRound‚â§ = {!!}

  Contig : Record ‚Üí Record ‚Üí Set
  Contig r r' = round r' ‚â° suc (round r)

  Simple : Record ‚Üí Record ‚Üí Set
  Simple _ _ = Unit

  ùïÇ-chain-contig : (k : ‚Ñï){r : Record} ‚Üí RecordChain r ‚Üí Set‚ÇÅ
  ùïÇ-chain-contig = ùïÇ-chain Contig

  -- States that a given record belongs in a record chain.
  data _‚ààRC_ (r‚ÇÄ : Record) : ‚àÄ{r‚ÇÅ} ‚Üí RecordChain r‚ÇÅ ‚Üí Set where
    here   : ‚àÄ{rc : RecordChain r‚ÇÄ} ‚Üí r‚ÇÄ ‚ààRC rc
    there  : ‚àÄ{r‚ÇÅ r‚ÇÇ}{rc : RecordChain r‚ÇÅ}(p : r‚ÇÅ ‚Üê r‚ÇÇ)(pv : Valid rc r‚ÇÇ)
           ‚Üí r‚ÇÄ ‚ààRC rc
           ‚Üí {prf : IsInPool r‚ÇÇ}
           ‚Üí r‚ÇÄ ‚ààRC (step rc p pv {prf})

  ùïÇ-chain-‚ààRC : ‚àÄ{r k P}{rc : RecordChain r}
              ‚Üí (c : ùïÇ-chain P k rc)
              ‚Üí (x y : Fin k)
              ‚Üí x ‚â§Fin y
              ‚Üí {b : Block}(prf : kchainBlock x c ‚â° b)
              ‚Üí (rc‚ÇÅ : RecordChain (B b))
              ‚Üí B (kchainBlock y c) ‚ààRC rc‚ÇÅ
  ùïÇ-chain-‚ààRC c x y x‚â§y hyp rc = {!!}

  -- This is the reflexive-transitive closure of _‚Üê_, as defined in 
  -- section 4.7 in the paper. Note it is different than the previous
  -- definition in the code. We must consider the 'reflexive' aspect as
  -- we can see in the paper's proof of S4.
  data _‚Üê‚ãÜ_ (r‚ÇÅ : Record) : Record ‚Üí Set‚ÇÅ where
    ssRefl : r‚ÇÅ ‚Üê‚ãÜ r‚ÇÅ
    ssStep : ‚àÄ {r r‚ÇÇ : Record} ‚Üí (r‚ÇÅ ‚Üê‚ãÜ r) ‚Üí (r ‚Üê r‚ÇÇ) ‚Üí r‚ÇÅ ‚Üê‚ãÜ r‚ÇÇ

  ------------------------
  -- Lemma 1

  InitialIrrel : (i j : Initial) ‚Üí i ‚â° j
  InitialIrrel mkInitial mkInitial = refl

  -- LemmaS1-1 states that a record that has been flagged as 'valid' (paper section 4.2)
  -- depends upon the initial record.
  lemmaS1-1 : {i : Initial}{r : Record}
            ‚Üí RecordChain r
            ‚Üí (I i) ‚Üê‚ãÜ r
  lemmaS1-1 {i} {i‚ÇÄ} (empty {h·µ¢}) rewrite InitialIrrel i h·µ¢ = ssRefl
  lemmaS1-1 {i} {r} (step rc r'‚Üêr vR)
    with vR
  ... | ValidBlockInit x = ssStep (lemmaS1-1 rc) r'‚Üêr
  ... | ValidBlockStep rc x = ssStep (lemmaS1-1 rc) r'‚Üêr
  ... | ValidQC rc x = ssStep (lemmaS1-1 rc) r'‚Üêr


  lemmaS1-2 : ‚àÄ{r‚ÇÄ r‚ÇÅ r‚ÇÇ}
            ‚Üí r‚ÇÄ ‚Üê r‚ÇÇ ‚Üí r‚ÇÅ ‚Üê r‚ÇÇ
            ‚Üí HashBroke ‚äé (r‚ÇÄ ‚â° r‚ÇÅ)
  lemmaS1-2 {i‚ÇÄ} {i‚ÇÅ} {b} (I‚ÜêB i‚ÇÄ‚Üêb) (I‚ÜêB i‚ÇÅ‚Üêb)
    with hash-cr (trans i‚ÇÄ‚Üêb (sym i‚ÇÅ‚Üêb))
  ... | inj‚ÇÅ (i‚ÇÄ‚â¢i‚ÇÅ , hi‚ÇÄ‚â°hi‚ÇÅ) = inj‚ÇÅ ( ( encodeR i‚ÇÄ , encodeR i‚ÇÅ ) , ( i‚ÇÄ‚â¢i‚ÇÅ , hi‚ÇÄ‚â°hi‚ÇÅ ) )
  ... | inj‚ÇÇ i‚ÇÄ‚â°i‚ÇÅ             = inj‚ÇÇ (encodeR-inj i‚ÇÄ‚â°i‚ÇÅ)
  lemmaS1-2 {i} {q} {b} (I‚ÜêB i‚Üêb) (Q‚ÜêB q‚Üêb)
    with hash-cr (trans i‚Üêb (sym q‚Üêb))
  ... | inj‚ÇÅ (i‚â¢q , hi‚â°hq)     = inj‚ÇÅ ( ( encodeR i , encodeR q ) , ( i‚â¢q , hi‚â°hq ) )
  ... | inj‚ÇÇ ()
  lemmaS1-2 {q} {i} {b} (Q‚ÜêB q‚Üêb) (I‚ÜêB i‚Üêb)
    with hash-cr (trans i‚Üêb (sym q‚Üêb))
  ... | inj‚ÇÅ (i‚â¢q , hi‚â°hq)     = inj‚ÇÅ ( ( encodeR i , encodeR q ) , ( i‚â¢q , hi‚â°hq ) )
  ... | inj‚ÇÇ ()
  lemmaS1-2 {q‚ÇÄ} {q‚ÇÅ} {b} (Q‚ÜêB q‚ÇÄ‚Üêb) (Q‚ÜêB q‚ÇÅ‚Üêb)
     with hash-cr (trans q‚ÇÄ‚Üêb (sym q‚ÇÅ‚Üêb))
  ... | inj‚ÇÅ (q‚ÇÄ‚â¢q‚ÇÅ , hq‚ÇÄ‚â°hq‚ÇÅ) = inj‚ÇÅ ( ( encodeR q‚ÇÄ , encodeR q‚ÇÅ ) , ( q‚ÇÄ‚â¢q‚ÇÅ , hq‚ÇÄ‚â°hq‚ÇÅ ) )
  ... | inj‚ÇÇ q‚ÇÅ‚â°q‚ÇÇ             = inj‚ÇÇ (encodeR-inj q‚ÇÅ‚â°q‚ÇÇ)
  lemmaS1-2 {b‚ÇÄ} {b‚ÇÅ} {q} (B‚ÜêQ b‚ÇÄ‚Üêq) (B‚ÜêQ b‚ÇÅ‚Üêq)
     with hash-cr (trans b‚ÇÄ‚Üêq (sym b‚ÇÅ‚Üêq))
  ... | inj‚ÇÅ (b‚ÇÄ‚â¢b‚ÇÅ , hb‚ÇÄ‚Üêhb‚ÇÅ) = inj‚ÇÅ ( ( encodeR b‚ÇÄ , encodeR b‚ÇÅ ), ( b‚ÇÄ‚â¢b‚ÇÅ , hb‚ÇÄ‚Üêhb‚ÇÅ ) )
  ... | inj‚ÇÇ b‚ÇÄ‚â°b‚ÇÅ             = inj‚ÇÇ (encodeR-inj b‚ÇÄ‚â°b‚ÇÅ)
  -- lemmaS1-2 {b‚ÇÄ} {b‚ÇÅ} {v} (B‚ÜêV b‚ÇÄ‚Üêv) (B‚ÜêV b‚ÇÅ‚Üêv)
  --    with hash-cr (trans b‚ÇÄ‚Üêv (sym b‚ÇÅ‚Üêv))
  -- ... | inj‚ÇÅ (b‚ÇÄ‚â¢b‚ÇÅ , hb‚ÇÄ‚Üêhb‚ÇÅ) = inj‚ÇÅ ( (encodeR b‚ÇÄ , encodeR b‚ÇÅ ) , ( b‚ÇÄ‚â¢b‚ÇÅ , hb‚ÇÄ‚Üêhb‚ÇÅ ) )
  -- ... | inj‚ÇÇ b‚ÇÄ‚â°b‚ÇÅ             = inj‚ÇÇ (encodeR-inj b‚ÇÄ‚â°b‚ÇÅ)


  -- Better name for our lemma
  ‚Üê-inj : ‚àÄ{r‚ÇÄ r‚ÇÅ r‚ÇÇ}
        ‚Üí r‚ÇÄ ‚Üê r‚ÇÇ ‚Üí r‚ÇÅ ‚Üê r‚ÇÇ
        ‚Üí HashBroke ‚äé (r‚ÇÄ ‚â° r‚ÇÅ)
  ‚Üê-inj = lemmaS1-2

  Valid-round-‚â§ : ‚àÄ{r‚ÇÄ r‚ÇÅ}
            ‚Üí (rc : RecordChain r‚ÇÄ)
            ‚Üí Valid rc r‚ÇÅ
            ‚Üí round r‚ÇÄ ‚â§ round r‚ÇÅ
  Valid-round-‚â§ empty (ValidBlockInit x) = z‚â§n
  Valid-round-‚â§ rc (ValidBlockStep rc x) = <‚áí‚â§ x
  Valid-round-‚â§ rc (ValidQC rc refl)     = ‚â§-refl

  ‚Üê‚ãÜ-round-< : ‚àÄ{r‚ÇÄ r‚ÇÅ}
             ‚Üí RecordChain r‚ÇÅ
             ‚Üí r‚ÇÄ ‚Üê‚ãÜ r‚ÇÅ
             ‚Üí HashBroke ‚äé (round r‚ÇÄ ‚â§ round r‚ÇÅ)
  ‚Üê‚ãÜ-round-< empty ssRefl                   = inj‚ÇÇ z‚â§n
  ‚Üê‚ãÜ-round-< (step path x x‚ÇÅ) ssRefl        = inj‚ÇÇ ‚â§-refl
  ‚Üê‚ãÜ-round-< (step path x vr‚ÇÅ) (ssStep r x‚ÇÇ)
    with lemmaS1-2 x‚ÇÇ x
  ...| inj‚ÇÅ hb   = inj‚ÇÅ hb
  ...| inj‚ÇÇ refl
    with ‚Üê‚ãÜ-round-< path r
  ...| inj‚ÇÅ hb = inj‚ÇÅ hb
  ...| inj‚ÇÇ rec = inj‚ÇÇ (‚â§-trans rec (Valid-round-‚â§ path vr‚ÇÅ))

  lemmaS1-3 : ‚àÄ{r‚ÇÄ r‚ÇÅ r‚ÇÇ}
            ‚Üí RecordChain r‚ÇÄ
            ‚Üí RecordChain r‚ÇÅ
            ‚Üí r‚ÇÄ ‚Üê‚ãÜ r‚ÇÇ ‚Üí r‚ÇÅ ‚Üê‚ãÜ r‚ÇÇ
            ‚Üí round r‚ÇÄ < round r‚ÇÅ
            ‚Üí HashBroke ‚äé r‚ÇÄ ‚Üê‚ãÜ r‚ÇÅ
  lemmaS1-3 rc‚ÇÄ rc‚ÇÅ ssRefl ssRefl rr‚ÇÄ<rr‚ÇÅ = inj‚ÇÇ ssRefl
  lemmaS1-3 rc‚ÇÄ rc‚ÇÅ ssRefl (ssStep r‚ÇÅ‚Üê‚ãÜr r‚Üêr‚ÇÄ) rr‚ÇÄ<rr‚ÇÅ
    with ‚Üê‚ãÜ-round-< rc‚ÇÄ (ssStep r‚ÇÅ‚Üê‚ãÜr r‚Üêr‚ÇÄ)
  ... | inj‚ÇÅ hb = inj‚ÇÅ hb
  ... | inj‚ÇÇ r‚ÇÅ‚â§r‚ÇÄ = contradiction r‚ÇÅ‚â§r‚ÇÄ (<‚áí‚â± rr‚ÇÄ<rr‚ÇÅ)
  lemmaS1-3 rc‚ÇÄ rc‚ÇÅ (ssStep r‚ÇÄ‚Üê‚ãÜr r‚Üêr‚ÇÅ) ssRefl rr‚ÇÄ<rr‚ÇÅ = inj‚ÇÇ (ssStep r‚ÇÄ‚Üê‚ãÜr r‚Üêr‚ÇÅ)
  lemmaS1-3 rc‚ÇÄ rc‚ÇÅ (ssStep r‚ÇÄ‚Üê‚ãÜr r‚Üêr‚ÇÇ) (ssStep r‚ÇÅ‚Üê‚ãÜr‚Çì r‚Çì‚Üêr‚ÇÇ) rr‚ÇÄ<rr‚ÇÅ
    with ‚Üê-inj r‚Üêr‚ÇÇ r‚Çì‚Üêr‚ÇÇ
  ... | inj‚ÇÅ hb = inj‚ÇÅ hb
  ... | inj‚ÇÇ refl = lemmaS1-3 rc‚ÇÄ rc‚ÇÅ r‚ÇÄ‚Üê‚ãÜr r‚ÇÅ‚Üê‚ãÜr‚Çì rr‚ÇÄ<rr‚ÇÅ

  ----------------------
  -- RecordChain Irrelevance
  --
  -- i.e., unless the hash was broken, there is always only
  --       one record chain up to a given record.
  
  ‚Üê-irrelevant : Irrelevant _‚Üê_
  ‚Üê-irrelevant (I‚ÜêB x) (I‚ÜêB y) = cong I‚ÜêB (‚â°-irrelevant x y) 
  ‚Üê-irrelevant (Q‚ÜêB x) (Q‚ÜêB y) = cong Q‚ÜêB (‚â°-irrelevant x y)
  ‚Üê-irrelevant (B‚ÜêQ x) (B‚ÜêQ y) = cong B‚ÜêQ (‚â°-irrelevant x y)

  Valid-irrelevant : ‚àÄ{r r'}{rc : RecordChain r}(p‚ÇÄ p‚ÇÅ : Valid rc r') ‚Üí p‚ÇÄ ‚â° p‚ÇÅ

  RecordChain-irrelevant : ‚àÄ{r}(rc‚ÇÄ rc‚ÇÅ : RecordChain r) ‚Üí HashBroke ‚äé rc‚ÇÄ ‚â° rc‚ÇÅ
  RecordChain-irrelevant empty empty = inj‚ÇÇ refl
  RecordChain-irrelevant (step rc0 rc0‚Üêr vr‚ÇÄ {p0}) (step rc1 rc1‚Üêr vr‚ÇÅ {p1}) 
    with lemmaS1-2 rc0‚Üêr rc1‚Üêr 
  ...| inj‚ÇÅ hb   = inj‚ÇÅ hb
  ...| inj‚ÇÇ refl 
    with RecordChain-irrelevant rc0 rc1
  ...| inj‚ÇÅ hb   = inj‚ÇÅ hb
  ...| inj‚ÇÇ refl rewrite ‚Üê-irrelevant rc1‚Üêr rc0‚Üêr 
     = inj‚ÇÇ (cong‚ÇÇ (Œª P Q ‚Üí step rc0 rc0‚Üêr P {Q}) 
                       (Valid-irrelevant vr‚ÇÄ vr‚ÇÅ) 
                       (IsInPool-irrelevant p0 p1))

  Valid-irrelevant (ValidBlockInit x)    (ValidBlockInit x‚ÇÅ) 
    = cong ValidBlockInit (‚â§-irrelevant x x‚ÇÅ)
  Valid-irrelevant (ValidBlockStep rc x) (ValidBlockStep .rc x‚ÇÅ) 
    = cong (ValidBlockStep rc) (‚â§-irrelevant x x‚ÇÅ)
  Valid-irrelevant (ValidQC rc x)        (ValidQC .rc x‚ÇÅ) 
    = cong (ValidQC rc) (‚â°-irrelevant x x‚ÇÅ)

  -----------------
  -- Commit Rule --

  -- A block (and everything preceeding it) is said to match the commit rule
  -- when the block is the head of a contiguious 3-chain. Here we define an auxiliary
  -- datatype to make definitions more bearable.
  data CommitRule : ‚àÄ{r} ‚Üí RecordChain r ‚Üí Block ‚Üí Set‚ÇÅ where
    commit-rule : ‚àÄ{r b}{rc : RecordChain r}(c3 : ùïÇ-chain Contig 3 rc) 
                ‚Üí b ‚â° c3 ‚ü¶ suc (suc zero) ‚üßck
                ‚Üí CommitRule rc b

  vote‚â°‚áíQPrevHash‚â° : {q q' : QC} {v v' : Vote} 
                   ‚Üí v  ‚àà qVotes (qBase q) 
                   ‚Üí v' ‚àà qVotes (qBase q') 
                   ‚Üí v ‚â° v' 
                   ‚Üí  qBlockHash (qBase q) ‚â° qBlockHash (qBase q')
  vote‚â°‚áíQPrevHash‚â° {q} {q'} v‚ààq v'‚ààq' refl
      with witness v‚ààq (qVotes-C3 q) | witness v'‚ààq' (qVotes-C3 q')
  ... | refl | refl = refl

  vote‚â°‚áíQRound‚â° : {q q' : QC} {v v' : Vote} 
                ‚Üí v  ‚àà qVotes (qBase q) 
                ‚Üí v' ‚àà qVotes (qBase q') 
                ‚Üí v ‚â° v' 
                ‚Üí  qRound (qBase q) ‚â° qRound (qBase q')
  vote‚â°‚áíQRound‚â° {q} {q'} v‚ààq v'‚ààq' refl
      with witness v‚ààq (qVotes-C4 q) | witness v'‚ààq' (qVotes-C4 q')
  ... | refl | refl = refl

  ¬¨bRound‚â°0 : ‚àÄ {b} ‚Üí RecordChain (B b) ‚Üí ¬¨ (bRound b ‚â° 0)
  ¬¨bRound‚â°0 (step empty x (ValidBlockInit ())) refl
  ¬¨bRound‚â°0 (step (step rc x‚ÇÇ (ValidQC _ refl)) x (ValidBlockStep _ ())) refl

