open import LibraBFT.Prelude
open import LibraBFT.Hash
open import LibraBFT.BasicTypes
open import LibraBFT.Lemmas

module LibraBFT.Abstract.RecordStoreState.Invariants 
    {f : ‚Ñï} (ec : EpochConfig f) 
    -- A Hash function maps a bytestring into a hash.
    (hash    : ByteString ‚Üí Hash)
    -- And is colission resistant
    (hash-cr : ‚àÄ{x y} ‚Üí hash x ‚â° hash y ‚Üí Collision hash x y ‚äé x ‚â° y)
  where

  open import LibraBFT.Abstract.Records          ec 
  open        WithCryptoHash                        hash hash-cr
  open import LibraBFT.Abstract.Records.Extends  ec hash hash-cr
  open import LibraBFT.Abstract.RecordChain      ec hash hash-cr
  open import LibraBFT.Abstract.RecordStoreState ec hash hash-cr

  -- Now, we need to state the invariants over the system that we seek to:
  --
  --  1) Guarantee when implementing the algo
  --  2) Use on the proofs
  --
  module _ {a}{RSS : Set a}(curr : isRecordStoreState RSS) where

    open WithRSS curr

    -- Correctness of a pool of records is modeled by bein able
    -- to trace any record in the chain back to the initial 
    -- record using only records in the pool.
    Correct : Set‚ÇÅ
    Correct = {r : Record} ‚Üí isInPool curr r ‚Üí RecordChain r

    -- The increasing round rule says that a current RecordStoreState
    -- that contains two votes from Œ± is guaranteed to have the order of
    -- votes respect the rounds
    IncreasingRoundRule : Set‚ÇÅ
    IncreasingRoundRule 
       = (Œ± : Author ec) ‚Üí Honest {ec = ec} Œ±
       ‚Üí ‚àÄ{q q'}(va  : Œ± ‚ààQC q)(va' : Œ± ‚ààQC q') -- Œ± has voted for q and q'
       ‚Üí vOrder (‚ààQC-Vote q va) < vOrder (‚ààQC-Vote q' va')
       ‚Üí qRound q < qRound q' 

    -- Another important predicate of a "valid" RecordStoreState is the fact
    -- that Œ±'s n-th vote is always the same.
    VotesOnlyOnceRule : Set‚ÇÅ
    VotesOnlyOnceRule 
       = (Œ± : Author ec) ‚Üí Honest {ec = ec} Œ±
       ‚Üí ‚àÄ{q q'}(va  : Œ± ‚ààQC q)(va' : Œ± ‚ààQC q') -- Œ± has voted for q and q'
       ‚Üí vOrder (‚ààQC-Vote q va) ‚â° vOrder (‚ààQC-Vote q' va')
       ‚Üí ‚ààQC-Vote q va ‚â° ‚ààQC-Vote q' va'

    -- TODO: change parameters to ‚ààQC-Vote; author can be implicit; QC has to be explicit.
    -- TOEXPLAIN: prevRound is defined for blocks only on the paper; however,
    --            it is cumbersome to open rc' to expose the block that comes
    --            before (Q q'). Yet, (Q q') is valid so said block has the same round,
    --            so, the prevRound (Q q') is the prevRound of the block preceding (Q q').
    LockedRoundRule : Set‚ÇÅ
    LockedRoundRule
      = (Œ± : Author ec) ‚Üí Honest {ec = ec} Œ±
      ‚Üí ‚àÄ{q}{rc : RecordChain (Q q)}{n : ‚Ñï}(c2 : ùïÇ-chain (2 + n) rc)
      ‚Üí (vŒ± : Œ± ‚ààQC q) -- Œ± knows of the 2-chain because it voted on the tail.
      ‚Üí ‚àÄ{q'}(rc' : RecordChain (Q q'))
      ‚Üí (vŒ±' : Œ± ‚ààQC q')
      ‚Üí vOrder (‚ààQC-Vote q vŒ±) < vOrder (‚ààQC-Vote q' vŒ±')
      ‚Üí bRound (kchainBlock (suc zero) c2) ‚â§ prevRound rc'
