open import LibraBFT.Prelude
open import LibraBFT.Hash
open import LibraBFT.BasicTypes
open import LibraBFT.Lemmas

open import LibraBFT.Abstract.EpochConfig

module LibraBFT.Abstract.RecordChain.Properties {f : ‚Ñï} (ec : EpochConfig f)
  -- A Hash function maps a bytestring into a hash.
  (hash    : ByteString ‚Üí Hash)
  -- And is colission resistant
  (hash-cr : ‚àÄ{x y} ‚Üí hash x ‚â° hash y ‚Üí Collision hash x y ‚äé x ‚â° y)
   where

 open import LibraBFT.Abstract.BFT                         ec 
 open import LibraBFT.Abstract.Records                     ec 
 open        WithCryptoHash                                   hash hash-cr
 open import LibraBFT.Abstract.Records.Extends             ec hash hash-cr
 open import LibraBFT.Abstract.RecordChain                 ec hash hash-cr
 open import LibraBFT.Abstract.RecordStoreState            ec hash hash-cr
 open import LibraBFT.Abstract.RecordStoreState.Invariants ec hash hash-cr
   as Invariants

 module ForRSS 
   {s}{RSS : Set s} (curr : isRecordStoreState RSS) 
   (correct               : Invariants.Correct             curr)
   (increasing-round-rule : Invariants.IncreasingRoundRule curr)
   (votes-only-once-rule  : Invariants.VotesOnlyOnceRule   curr)
   (locked-round-rule     : Invariants.LockedRoundRule     curr)
  where

   open WithRSS curr

   ----------------------
   -- Lemma 2


   -- TODO: When we bring in the state everywhere; this will remain very similar.
   --       We will add another check for st‚ÇÄ ‚âüState st‚ÇÅ after checking the block
   --       equality in (***); Naturally, if blocks are equal so is the state.
   --       We will need some command-application-injective lemma.
   --
   --         1) when st‚ÇÄ ‚âüState st‚ÇÅ returns yes, we done.
   --         2) when it returns no, and the blocks are different, no problem.
   --         3) when it returns no and the blocks are equal, its impossible! HashBroke!

   lemmaS2 : {b‚ÇÄ b‚ÇÅ : Block}{q‚ÇÄ q‚ÇÅ : QC}
           ‚Üí (rc‚ÇÄ : RecordChain (B b‚ÇÄ))(p‚ÇÄ : B b‚ÇÄ ‚Üê Q q‚ÇÄ)
           ‚Üí (rc‚ÇÅ : RecordChain (B b‚ÇÅ))(p‚ÇÅ : B b‚ÇÅ ‚Üê Q q‚ÇÅ)
           ‚Üí bRound b‚ÇÄ ‚â° bRound b‚ÇÅ
           ‚Üí HashBroke ‚äé b‚ÇÄ ‚â° b‚ÇÅ -- √ó qState q‚ÇÄ ‚â° qState q‚ÇÅ
   lemmaS2 {b‚ÇÄ} {b‚ÇÅ} {q‚ÇÄ} {q‚ÇÅ} rc‚ÇÄ (B‚ÜêQ refl h‚ÇÄ) rc‚ÇÅ (B‚ÜêQ refl h‚ÇÅ) hyp
     with b‚ÇÄ ‚âüBlock b‚ÇÅ -- (***)
   ...| yes done = inj‚ÇÇ done
   ...| no  imp
     with lemmaB1 q‚ÇÄ q‚ÇÅ
   ...|  (a , (a‚ààq‚ÇÄ , a‚ààq‚ÇÅ , honest))
     with <-cmp (vOrder (‚ààQC-Vote q‚ÇÄ a‚ààq‚ÇÄ)) (vOrder (‚ààQC-Vote q‚ÇÅ a‚ààq‚ÇÅ))
   ...| tri< va<va' _ _
     with increasing-round-rule a honest {q‚ÇÄ} {q‚ÇÅ} a‚ààq‚ÇÄ a‚ààq‚ÇÅ va<va'
   ...| res = ‚ä•-elim (<‚áí‚â¢ res hyp)
   lemmaS2 {b‚ÇÄ} {b‚ÇÅ} {q‚ÇÄ} {q‚ÇÅ} rc‚ÇÄ (B‚ÜêQ refl h‚ÇÄ) rc‚ÇÅ (B‚ÜêQ refl h‚ÇÅ) hyp
      | no imp
      |  (a , (a‚ààq‚ÇÄ , a‚ààq‚ÇÅ , honest))
      | tri> _ _ va'<va
     with increasing-round-rule a honest {q‚ÇÅ} {q‚ÇÄ} a‚ààq‚ÇÅ a‚ààq‚ÇÄ va'<va
   ...| res = ‚ä•-elim (<‚áí‚â¢ res (sym hyp))
   lemmaS2 {b‚ÇÄ} {b‚ÇÅ} {q‚ÇÄ} {q‚ÇÅ} rc‚ÇÄ (B‚ÜêQ refl h‚ÇÄ) rc‚ÇÅ (B‚ÜêQ refl h‚ÇÅ) hyp
      | no imp
      |  (a , (a‚ààq‚ÇÄ , a‚ààq‚ÇÅ , honest))
      | tri‚âà _ va‚â°va' _
     with votes-only-once-rule a honest {q‚ÇÄ} {q‚ÇÅ} a‚ààq‚ÇÄ a‚ààq‚ÇÅ va‚â°va'
   ...| v‚ÇÄ‚â°v‚ÇÅ = let v‚ÇÄ‚ààq‚ÇÄ = ‚ààQC-Vote-correct q‚ÇÄ a‚ààq‚ÇÄ
                    v‚ÇÅ‚ààq‚ÇÅ = ‚ààQC-Vote-correct q‚ÇÅ a‚ààq‚ÇÅ
                in inj‚ÇÅ ((encodeR (B b‚ÇÄ) , encodeR (B b‚ÇÅ)) , (imp ‚àò B-inj ‚àò encodeR-inj)
                        , trans h‚ÇÄ (trans (vote‚â°‚áíQPrevHash‚â° {q‚ÇÄ} {q‚ÇÅ} v‚ÇÄ‚ààq‚ÇÄ v‚ÇÅ‚ààq‚ÇÅ v‚ÇÄ‚â°v‚ÇÅ) (sym h‚ÇÅ)))

   lemmaS2' : {q‚ÇÄ q‚ÇÅ : QC}
            ‚Üí (rc‚ÇÄ : RecordChain (Q q‚ÇÄ))
            ‚Üí (rc‚ÇÅ : RecordChain (Q q‚ÇÅ))
            ‚Üí bRound (prevBlock rc‚ÇÄ) ‚â° bRound (prevBlock rc‚ÇÅ)
            ‚Üí HashBroke ‚äé prevBlock rc‚ÇÄ ‚â° prevBlock rc‚ÇÅ -- √ó qState q‚ÇÄ ‚â° qState q‚ÇÅ
   lemmaS2' = {!!}

   ----------------
   -- Lemma S3

   -- MSM: Not sure I'm following this comment, but I think "certified" means there is a quorum
   -- certificate that references the block, while "verified" just means it was valid to add (so a
   -- block can be verified but not certified; however, it cannot be certified but not verified)..

   -- LPS && VCM: The first occurence of the string "certified" in the paper is at 4.2, the paper
   --  never defines what it actually means. Nevertheless, we have just found some simplification
   --  oppostunities while looking over our code trying to figure this out. We might be able to
   --  make the distinction you mention. We think it makes sense.

   -- VCM: Now that I come to think of it, the paper author's must use "certified" and "verified"
   --      interchangeably in this theorem.
   --      If a quorum of verifiers voted for block B at round C, it means they validated said block

   -- We just noted that when the paper mentions 'certified' or ' verified'
   -- block, we encode it as a 'RecordChain' ending in said block.
   lemmaS3 : ‚àÄ{P r‚ÇÇ}{rc : RecordChain r‚ÇÇ}
           ‚Üí (c3 : ùïÇ-chain P 3 rc)          -- This is B‚ÇÄ ‚Üê C‚ÇÄ ‚Üê B‚ÇÅ ‚Üê C‚ÇÅ ‚Üê B‚ÇÇ ‚Üê C‚ÇÇ in S3
           ‚Üí {q' : QC}
           ‚Üí (certB : RecordChain (Q q')) -- Immediatly before a (Q q), we have the certified block (B b), which is the 'B' in S3
           ‚Üí round r‚ÇÇ < qRound (qBase q')
           ‚Üí bRound (kchainBlock (suc (suc zero)) c3) ‚â§ prevRound certB
   lemmaS3 {r} (s-chain {rc = rc} {b = b‚ÇÇ} {q‚ÇÇ} r‚Üêb‚ÇÇ {pb} _ b‚ÇÇ‚Üêq‚ÇÇ {pq} c2) {q'} (step certB b‚Üêq' {pq'}) hyp
     with lemmaB1 q‚ÇÇ q'
   ...| (a , (a‚ààq‚ÇÇ , a‚ààq' , honest))
     -- TODO: We have done a similar reasoning on the order of votes on lemmaS2; This is cumbersome
     -- and error prone. We should factor out a predicate that analyzes the rounds of QC's and
     -- returns us a judgement about the order of the votes.
     with <-cmp (vOrder (‚ààQC-Vote q‚ÇÇ a‚ààq‚ÇÇ)) (vOrder (‚ààQC-Vote q' a‚ààq'))
   ...| tri> _ _ va'<va‚ÇÇ
     with increasing-round-rule a honest {q'} {q‚ÇÇ} a‚ààq' a‚ààq‚ÇÇ va'<va‚ÇÇ
   ...| res = ‚ä•-elim (n‚âÆn (qRound (qBase q')) (‚â§-trans res (‚â§-unstep hyp)))
   lemmaS3 {r} (s-chain {rc = rc} {b = b‚ÇÇ} {q‚ÇÇ} r‚Üêb‚ÇÇ {pb} P b‚ÇÇ‚Üêq‚ÇÇ {pq} c2) {q'} (step certB b‚Üêq' {pq'}) hyp
      | (a , (a‚ààq‚ÇÇ , a‚ààq' , honest))
      | tri‚âà _ va‚ÇÇ‚â°va' _
     with votes-only-once-rule a honest {q‚ÇÇ} {q'} a‚ààq‚ÇÇ a‚ààq' va‚ÇÇ‚â°va'
   ...| v‚ÇÇ‚â°v' = let v‚ÇÇ‚ààq‚ÇÇ = ‚ààQC-Vote-correct q‚ÇÇ a‚ààq‚ÇÇ
                    v'‚ààq' = ‚ààQC-Vote-correct q' a‚ààq'
                in ‚ä•-elim (<‚áí‚â¢ hyp (vote‚â°‚áíQRound‚â° {q‚ÇÇ} {q'} v‚ÇÇ‚ààq‚ÇÇ v'‚ààq' v‚ÇÇ‚â°v'))
   lemmaS3 {r} (s-chain {rc = rc} {b = b‚ÇÇ} {q‚ÇÇ} r‚Üêb‚ÇÇ {pb} P b‚ÇÇ‚Üêq‚ÇÇ {pq} c2) {q'} (step certB b‚Üêq' {pq'}) hyp
      | (a , (a‚ààq‚ÇÇ , a‚ààq' , honest))
      | tri< va‚ÇÇ<va' _ _
     with b‚Üêq'
   ...| B‚ÜêQ rrr xxx
      with locked-round-rule a honest {q‚ÇÇ} (s-chain r‚Üêb‚ÇÇ {pb} P b‚ÇÇ‚Üêq‚ÇÇ {pq} c2) a‚ààq‚ÇÇ {q'} (step certB (B‚ÜêQ rrr xxx) {pq'}) a‚ààq' va‚ÇÇ<va'
   ...| res = ‚â§-trans (kchainBlockRound‚â§ zero (suc zero) c2 z‚â§n) res

  ------------------
  -- Proposition S4

   y+1+2-lemma : ‚àÄ{x y} ‚Üí x ‚â§ y ‚Üí y ‚â§ 2 + x
               ‚Üí y ‚â° x ‚äé y ‚â° suc x ‚äé y ‚â° suc (suc x)
   y+1+2-lemma hyp0 hyp1 = {!!}

   3chain-round-lemma
     : ‚àÄ{r}{rc : RecordChain r}(c3 : ùïÇ-chain Contig 3 rc)
     ‚Üí bRound (c3 ‚ü¶ zero ‚üßck) ‚â° 2 + bRound (c3 ‚ü¶ suc (suc zero) ‚üßck)
   3chain-round-lemma c3 = {!!}

   kchain-round-head-lemma
     : ‚àÄ{k r}{rc : RecordChain r}(c3 : ùïÇ-chain Contig (suc k) rc)
     ‚Üí round r ‚â° bRound (c3 ‚ü¶ zero ‚üßck)
   kchain-round-head-lemma = {!!}

   kchain-round-‚â§-lemma
     : ‚àÄ{k r}{rc : RecordChain r}(c3 : ùïÇ-chain Contig k rc)(ix : Fin k)
     ‚Üí bRound (c3 ‚ü¶ ix ‚üßck) ‚â§ round r
   kchain-round-‚â§-lemma = {!!}

   kchain-to-RecordChain-Q
     : ‚àÄ{k r}{rc : RecordChain r}(c : ùïÇ-chain Contig k rc)(ix : Fin k)
     ‚Üí RecordChain (Q (c ‚ü¶ ix ‚üßck'))
   kchain-to-RecordChain-Q 0-chain () 
   kchain-to-RecordChain-Q (s-chain {rc = rc} r‚Üêb {pb} x b‚Üêq {pq} c) zero 
     = step (step rc r‚Üêb {pb}) b‚Üêq {pq}
   kchain-to-RecordChain-Q (s-chain r‚Üêb x b‚Üêq c) (suc zz) 
     = kchain-to-RecordChain-Q c zz

   kchain-to-RecordChain-B
     : ‚àÄ{k r}{rc : RecordChain r}(c : ùïÇ-chain Contig k rc)(ix : Fin k)
     ‚Üí RecordChain (B (c ‚ü¶ ix ‚üßck))
   kchain-to-RecordChain-B 0-chain ()
   kchain-to-RecordChain-B (s-chain {rc = rc} r‚Üêb {pb} x b‚Üêq {pq} c) zero
     = (step rc r‚Üêb {pb})
   kchain-to-RecordChain-B (s-chain r‚Üêb x b‚Üêq c) (suc zz)
     = kchain-to-RecordChain-B c zz

   kchain-to-RecordChain-Q-prevBlock
     : ‚àÄ{k r}{rc : RecordChain r}(c : ùïÇ-chain Contig k rc)(ix : Fin k)
     ‚Üí prevBlock (kchain-to-RecordChain-Q c ix) ‚â° c ‚ü¶ ix ‚üßck
   kchain-to-RecordChain-Q-prevBlock (s-chain r‚Üêb x (B‚ÜêQ r b‚Üêq) c) zero = refl
   kchain-to-RecordChain-Q-prevBlock (s-chain r‚Üêb x (B‚ÜêQ r b‚Üêq) c) (suc ix) 
     = kchain-to-RecordChain-Q-prevBlock c ix

   propS4-base-lemma-1
     : ‚àÄ{q}{rc : RecordChain (Q q)}
     ‚Üí (c3 : ùïÇ-chain Contig 3 rc) -- This is B‚ÇÄ ‚Üê C‚ÇÄ ‚Üê B‚ÇÅ ‚Üê C‚ÇÅ ‚Üê B‚ÇÇ ‚Üê C‚ÇÇ in S4
     ‚Üí {b' : Block}(q' : QC)
     ‚Üí (certB : RecordChain (B b'))(ext : (B b') ‚Üê (Q q'))
     ‚Üí bRound (c3 ‚ü¶ suc (suc zero) ‚üßck) ‚â§ bRound b'
     ‚Üí bRound b' ‚â§ bRound (c3 ‚ü¶ zero ‚üßck) 
     ‚Üí bRound b' ‚àà ( bRound (c3 ‚ü¶ zero ‚üßck)
                   ‚à∑ bRound (c3 ‚ü¶ (suc zero) ‚üßck)
                   ‚à∑ bRound (c3 ‚ü¶ (suc (suc zero)) ‚üßck)
                   ‚à∑ [])
   propS4-base-lemma-1 = {!!}

   propS4-base-lemma-2
     : ‚àÄ{P k r}{rc : RecordChain r}
     ‚Üí (c  : ùïÇ-chain P k rc)
     ‚Üí {b' : Block}(q' : QC)
     ‚Üí (certB : RecordChain (B b'))(ext : (B b') ‚Üê (Q q'))
     ‚Üí (ix : Fin k)
     ‚Üí bRound (kchainBlock ix c) ‚â° bRound b'
     ‚Üí HashBroke ‚äé (kchainBlock ix c ‚â° b')
   propS4-base-lemma-2 (s-chain {rc = rc} r‚Üêb {prfB} prf b‚Üêq {prfQ} c) q' certB ext zero hyp 
     = lemmaS2 (step rc r‚Üêb {prfB}) b‚Üêq certB ext hyp 
   propS4-base-lemma-2 (s-chain r‚Üêb prf b‚Üêq c) 
                       q' certB ext (suc ix) hyp 
     = propS4-base-lemma-2 c q' certB ext ix hyp

   propS4-base : ‚àÄ{q}{rc : RecordChain (Q q)}
               ‚Üí (c3 : ùïÇ-chain Contig 3 rc) -- This is B‚ÇÄ ‚Üê C‚ÇÄ ‚Üê B‚ÇÅ ‚Üê C‚ÇÅ ‚Üê B‚ÇÇ ‚Üê C‚ÇÇ in S4
               ‚Üí {q' : QC}
               ‚Üí (certB : RecordChain (Q q'))
               ‚Üí bRound (c3 ‚ü¶ suc (suc zero) ‚üßck) ‚â§ qRound (qBase q')
               ‚Üí qRound (qBase q') ‚â§ bRound (c3 ‚ü¶ zero ‚üßck) 
               ‚Üí HashBroke ‚äé B (c3 ‚ü¶ suc (suc zero) ‚üßck) ‚ààRC certB
   propS4-base c3 {q'} (step certB (B‚ÜêQ refl x‚ÇÄ) {pq‚ÇÄ}) hyp0 hyp1 
     with propS4-base-lemma-1 c3 q' certB (B‚ÜêQ refl x‚ÇÄ) hyp0 hyp1
   ...| here r 
     with propS4-base-lemma-2 c3 q' certB (B‚ÜêQ refl x‚ÇÄ) zero r
   ...| inj‚ÇÅ hb  = inj‚ÇÅ hb
   ...| inj‚ÇÇ res = inj‚ÇÇ (there (B‚ÜêQ refl x‚ÇÄ) 
                               (ùïÇ-chain-‚ààRC c3 zero (suc (suc zero)) z‚â§n res certB))
   propS4-base c3 {q'} (step certB (B‚ÜêQ refl x‚ÇÄ) {pq‚ÇÄ}) 
       hyp0 hyp1 
      | there (here r) 
     with propS4-base-lemma-2 c3 q' certB (B‚ÜêQ refl x‚ÇÄ) (suc zero) r 
   ...| inj‚ÇÅ hb  = inj‚ÇÅ hb 
   ...| inj‚ÇÇ res = inj‚ÇÇ (there (B‚ÜêQ refl x‚ÇÄ) 
                               (ùïÇ-chain-‚ààRC c3 (suc zero) (suc (suc zero)) (s‚â§s z‚â§n) res certB))
   propS4-base c3 {q'} (step certB (B‚ÜêQ refl x‚ÇÄ) {pq‚ÇÄ}) hyp0 hyp1 
      | there (there (here r)) 
     with propS4-base-lemma-2 c3 q' certB (B‚ÜêQ refl x‚ÇÄ) (suc (suc zero)) r
   ...| inj‚ÇÅ hb  = inj‚ÇÅ hb
   ...| inj‚ÇÇ res = inj‚ÇÇ (there (B‚ÜêQ refl x‚ÇÄ) 
                               (ùïÇ-chain-‚ààRC c3 (suc (suc zero)) (suc (suc zero)) (s‚â§s (s‚â§s z‚â§n)) res certB))

   {-# TERMINATING #-}
   propS4 :  ‚àÄ{q}{rc : RecordChain (Q q)}
          ‚Üí (c3 : ùïÇ-chain Contig 3 rc) -- This is B‚ÇÄ ‚Üê C‚ÇÄ ‚Üê B‚ÇÅ ‚Üê C‚ÇÅ ‚Üê B‚ÇÇ ‚Üê C‚ÇÇ in S4
          ‚Üí {q' : QC}
          ‚Üí (certB : RecordChain (Q q'))
          ‚Üí bRound (c3 ‚ü¶ suc (suc zero) ‚üßck) ‚â§ qRound (qBase q')
          -- In the paper, the proposition states that B‚ÇÄ ‚Üê‚ãÜ B, yet, B is the block preceding
          -- C, which in our case is 'prevBlock certB'. Hence, to say that B‚ÇÄ ‚Üê‚ãÜ B is
          -- to say that B‚ÇÄ is a block in the RecordChain that goes all the way to C.
          ‚Üí HashBroke ‚äé B (c3 ‚ü¶ suc (suc zero) ‚üßck) ‚ààRC certB
   propS4 {rc = rc} c3 {q} (step certB b‚Üêq {pq}) hyp
     with qRound (qBase q) ‚â§?‚Ñï bRound (c3 ‚ü¶ zero ‚üßck) 
   ...| yes rq‚â§rb‚ÇÇ = propS4-base c3 {q} (step certB b‚Üêq {pq}) hyp rq‚â§rb‚ÇÇ
   propS4 c3 {q} (step certB b‚Üêq {pq}) hyp
      | no  rb‚ÇÇ<rq 
     with lemmaS3 c3 (step certB b‚Üêq {pq}) {!‚â∞‚áí> rb‚ÇÇ<rq -- then some magic with vq!}
   ...| ls3 
     with certB | b‚Üêq
   ...| step certB' res | (B‚ÜêQ rx x) 
     with certB' | res
   ...| empty | (I‚ÜêB ry y) 
      = contradiction (n‚â§0‚áín‚â°0 ls3) 
                      (¬¨bRound‚â°0 (kchain-to-RecordChain-B c3 (suc (suc zero))))
   ...| step {r = r} certB'' (B‚ÜêQ refl res') {p''} | (Q‚ÜêB {q = q*} ry y) 
     with propS4 c3 (step certB'' (B‚ÜêQ refl res') {p''}) ls3 
   ...| inj‚ÇÅ hb    = inj‚ÇÅ hb
   ...| inj‚ÇÇ final = inj‚ÇÇ (there (B‚ÜêQ rx x) (there (Q‚ÜêB ry y) final))

   -------------------
   -- Theorem S5

   kchain-round-‚â§-lemma'
     : ‚àÄ{k q}{rc : RecordChain (Q q)}(c3 : ùïÇ-chain Contig k rc)(ix : Fin k)
     ‚Üí bRound (c3 ‚ü¶ ix ‚üßck) ‚â§ qRound (qBase q)
   kchain-round-‚â§-lemma' (s-chain r‚Üêb x (B‚ÜêQ refl b‚Üêq) c3) zero = ‚â§-refl
   kchain-round-‚â§-lemma' (s-chain (I‚ÜêB prf imp) refl (B‚ÜêQ refl _) 0-chain) (suc ()) 
   kchain-round-‚â§-lemma' (s-chain (Q‚ÜêB prf imp) x (B‚ÜêQ refl _) c2) (suc ix) 
     = ‚â§-trans (kchain-round-‚â§-lemma' c2 ix) (‚â§-unstep prf)

   _<$>_ : ‚àÄ{a b}{A : Set a}{B : Set b} ‚Üí (A ‚Üí B) ‚Üí HashBroke ‚äé A ‚Üí HashBroke ‚äé B
   f <$> (inj‚ÇÅ hb) = inj‚ÇÅ hb
   f <$> (inj‚ÇÇ x)  = inj‚ÇÇ (f x)

   thmS5 : ‚àÄ{q q'}{rc : RecordChain (Q q)}{rc' : RecordChain (Q q')}
         ‚Üí {b b' : Block}
         ‚Üí CommitRule rc  b
         ‚Üí CommitRule rc' b'
         ‚Üí HashBroke ‚äé ((B b) ‚ààRC rc' ‚äé (B b') ‚ààRC rc) -- Not conflicting means one extends the other.
   thmS5 {rc = rc} {rc'} (commit-rule c3 refl) (commit-rule c3' refl) 
     with <-cmp (bRound (c3 ‚ü¶ suc (suc zero) ‚üßck)) (bRound (c3' ‚ü¶ suc (suc zero) ‚üßck)) 
   ...| tri‚âà _ r‚â°r' _ = inj‚ÇÅ <$> (propS4 c3 rc' (‚â§-trans (‚â°‚áí‚â§ r‚â°r') (kchain-round-‚â§-lemma' c3' (suc (suc zero))))) 
   ...| tri< r<r' _ _ = inj‚ÇÅ <$> (propS4 c3 rc' (‚â§-trans (‚â§-unstep r<r') (kchain-round-‚â§-lemma' c3' (suc (suc zero))))) 
   ...| tri> _ _ r'<r = inj‚ÇÇ <$> (propS4 c3' rc (‚â§-trans (‚â§-unstep r'<r) (kchain-round-‚â§-lemma' c3 (suc (suc zero))))) 
