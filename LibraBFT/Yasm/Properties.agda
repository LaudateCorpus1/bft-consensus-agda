{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.

   Copyright (c) 2020, 2021 Oracle and/or its affiliates.
   Licensed under the Universal Permissive License v 1.0 as shown at https://opensource.oracle.com/licenses/upl
-}
open import LibraBFT.Prelude
open import LibraBFT.Base.PKCS
open import LibraBFT.Base.Types
import      LibraBFT.Yasm.Base as LYB

-- This module provides some definitions and properties that facilitate
-- proofs of properties about a distributed system modeled by Yasm.System
-- paramaterized by some SystemParameters.

module LibraBFT.Yasm.Properties
   (NodeId      : Set)
   (‚Ñì-EC        : Level)
   (EpochConfig : Set ‚Ñì-EC)
   (epochId     : EpochConfig ‚Üí EpochId)
   (authorsN    : EpochConfig ‚Üí ‚Ñï)
   (getPubKey   : (ec : EpochConfig) ‚Üí LYB.Member NodeId ‚Ñì-EC EpochConfig epochId authorsN ec ‚Üí PK)
   (parms       : LYB.SystemParameters NodeId ‚Ñì-EC EpochConfig epochId authorsN)
  where
 open import LibraBFT.Yasm.AvailableEpochs NodeId ‚Ñì-EC EpochConfig epochId authorsN
             using (AvailableEpochs) renaming (lookup'' to EC-lookup)
 import      LibraBFT.Yasm.AvailableEpochs NodeId ‚Ñì-EC EpochConfig epochId authorsN
             as AE
 open import LibraBFT.Yasm.Base            NodeId ‚Ñì-EC EpochConfig epochId authorsN
 open import LibraBFT.Yasm.System NodeId ‚Ñì-EC EpochConfig epochId authorsN parms
 open LYB.SystemParameters parms

 -- A ValidPartForPK collects the assumptions about what a /part/ in the outputs of an honest verifier
 -- satisfies: (i) the epoch field is consistent with the existent epochs and (ii) the verifier is
 -- a member of the associated epoch config, and (iii) has the given PK in that epoch.
 record ValidPartForPK {e}(ùìîs : AvailableEpochs e)(part : Part)(pk : PK) : Set ‚Ñì-EC where
   constructor mkValidPartForPK
   field
     vp-epoch           : part-epoch part < e
     vp-ec              : EpochConfig
     vp-ec-‚â°            : AE.lookup'' ùìîs vp-epoch ‚â° vp-ec
     vp-member          : Member vp-ec
     vp-key             : getPubKey vp-ec vp-member ‚â° pk
 open ValidPartForPK public

 -- A valid part remains valid when new epochs are added
 ValidPartForPK-stable-epoch : ‚àÄ{e part pk}{ùìîs : AvailableEpochs e}(ùìî : EpochConfigFor e)
                          ‚Üí ValidPartForPK ùìîs part pk
                          ‚Üí ValidPartForPK (AE.append ùìî ùìîs) part pk
 ValidPartForPK-stable-epoch {pk = pk} {ùìîs} ùìî (mkValidPartForPK e ec refl emem vpk) = record
   { vp-epoch           = ‚â§-step e
   ; vp-ec              = ec
   ; vp-ec-‚â°            = AE.lookup''-‚â§-step-lemma ùìîs ùìî e
   ; vp-member          = emem
   ; vp-key             = vpk
   }

 -- A valid part remains valid
 ValidPartForPK-stable : ‚àÄ{e e'}{st : SystemState e}{st' : SystemState e'}
                    ‚Üí Step* st st' ‚Üí ‚àÄ{part pk}
                    ‚Üí ValidPartForPK (availEpochs st) part pk
                    ‚Üí ValidPartForPK (availEpochs st') part pk
 ValidPartForPK-stable step-0 v = v
 ValidPartForPK-stable (step-s st (step-epoch ùìî)) v
   = ValidPartForPK-stable-epoch ùìî (ValidPartForPK-stable st v)
 ValidPartForPK-stable (step-s st (step-peer _)) v
   = ValidPartForPK-stable st v

 -- We say that an implementation produces only valid parts iff all parts of every message in the
 -- output of a 'StepPeerState' are either: (i) a valid new part (i.e., the part is valid and has
 -- not been included in a previously sent message with the same signature), or (ii) the part been
 -- included in a previously sent message with the same signature.
 StepPeerState-AllValidParts : Set ‚Ñì-EC
 StepPeerState-AllValidParts = ‚àÄ{e s m part pk outs Œ±}{ùìîs : AvailableEpochs e}{st : SystemState e}
   ‚Üí (r : ReachableSystemState st)
   ‚Üí Meta-Honest-PK pk
   ‚Üí StepPeerState Œ± ùìîs (msgPool st) (Map-lookup Œ± (peerStates st)) s outs
   ‚Üí m ‚àà outs ‚Üí part ‚äÇMsg m ‚Üí (ver : WithVerSig pk part)
                                 -- NOTE: this doesn't DIRECTLY imply that nobody else has sent a
                                 -- message with the same signature just that the author of the part
                                 -- hasn't.
   ‚Üí (ValidPartForPK ùìîs part pk √ó ¬¨ (MsgWithSig‚àà pk (ver-signature ver) (msgPool st)))
   ‚äé MsgWithSig‚àà pk (ver-signature ver) (msgPool st)

 -- A /part/ was introduced by a specific step when:
 IsValidNewPart : ‚àÄ{e e'}{pre : SystemState e}{post : SystemState e'} ‚Üí Signature ‚Üí PK ‚Üí Step pre post ‚Üí Set ‚Ñì-EC
 IsValidNewPart _ _ (step-epoch _) = Lift ‚Ñì-EC ‚ä•
 -- said step is a /step-peer/ and
 IsValidNewPart {pre = pre} sig pk (step-peer pstep)
    -- the part has never been seen before
    = ¬¨ (MsgWithSig‚àà pk sig (msgPool pre))
    √ó Œ£ (MsgWithSig‚àà pk sig (msgPool (StepPeer-post pstep)))
        (Œª m ‚Üí ValidPartForPK (availEpochs pre) (msgPart m) pk)

 -- When we can prove that the implementation provided by 'parms' at the
 -- top of this module satisfies 'StepPeerState-AllValidParts', we can
 -- prove a number of useful structural properties:

 -- TODO-2: Refactor into a file (LibraBFT.Yasm.Properties.Structural) later on
 -- if this grows too large.
 module Structural (sps-avp      : StepPeerState-AllValidParts) where

     -- We can unwind the state and highlight the step where a part was
     -- originally sent. This 'unwind' function combined with Any-Step-elim
     -- enables a powerful form of reasoning. The 'honestVoteEpoch' below
     -- exemplifies this well.
     unwind : ‚àÄ{e}{st : SystemState e}(tr : ReachableSystemState st)
            ‚Üí ‚àÄ{p m œÉ pk} ‚Üí Meta-Honest-PK pk
            ‚Üí p ‚äÇMsg m ‚Üí (œÉ , m) ‚àà msgPool st ‚Üí (ver : WithVerSig pk p)
            ‚Üí Any-Step (IsValidNewPart (ver-signature ver) pk) tr
     unwind (step-s tr (step-epoch _))    hpk p‚äÇm m‚ààsm sig
       = step-there (unwind tr hpk p‚äÇm m‚ààsm sig)
     unwind (step-s tr (step-peer {pid = Œ≤} {outs = outs} {pre = pre} sp)) hpk p‚äÇm m‚ààsm sig
       with Any-++‚Åª (List-map (Œ≤ ,_) outs) {msgPool pre} m‚ààsm
     ...| inj‚ÇÇ furtherBack = step-there (unwind tr hpk p‚äÇm furtherBack sig)
     ...| inj‚ÇÅ thisStep
       with sp
     ...| step-cheat fm isCheat
       with thisStep
     ...| here refl
       with isCheat p‚äÇm sig
     ...| inj‚ÇÅ abs    = ‚ä•-elim (hpk abs)
     ...| inj‚ÇÇ sentb4
       with unwind tr {p = msgPart sentb4} hpk (msg‚äÜ sentb4) (msg‚ààpool sentb4) (msgSigned sentb4)
     ...| res rewrite msgSameSig sentb4 = step-there res
     unwind (step-s tr (step-peer {pid = Œ≤} {outs = outs} {pre = pre} sp)) hpk p‚äÇm m‚ààsm sig
        | inj‚ÇÅ thisStep
        | step-honest x
       with Any-satisfied-‚àà (Any-map‚Åª thisStep)
     ...| (m , refl , m‚ààouts)
       with sps-avp tr hpk x m‚ààouts p‚äÇm sig
     ...| inj‚ÇÇ sentb4 with unwind tr {p = msgPart sentb4} hpk (msg‚äÜ sentb4) (msg‚ààpool sentb4) (msgSigned sentb4)
     ...| res rewrite msgSameSig sentb4 = step-there res
     unwind (step-s tr (step-peer {pid = Œ≤} {outs = outs} {pre = pre} sp)) {p} hpk p‚äÇm m‚ààsm sig
        | inj‚ÇÅ thisStep
        | step-honest x
        | (m , refl , m‚ààouts)
        | inj‚ÇÅ (valid-part , notBefore) =
               step-here tr (notBefore , MsgWithSig‚àà-++À° (mkMsgWithSig‚àà _ _ p‚äÇm Œ≤ thisStep sig refl)
                                       , valid-part)

     -- Unwind is inconvenient to use by itself because we have to do
     -- induction on Any-Step-elim. The 'honestPartValid' property below
     -- provides a fairly general result conveniently: for every part
     -- verifiable with an honest PK, there is a msg with the same
     -- signature that is valid for some pid.

     honestPartValid : ‚àÄ {e st} ‚Üí ReachableSystemState {e} st ‚Üí ‚àÄ {pk nm v sender}
                     ‚Üí Meta-Honest-PK pk
                     ‚Üí v ‚äÇMsg nm ‚Üí (sender , nm) ‚àà msgPool st ‚Üí (ver : WithVerSig pk v)
                     ‚Üí Œ£ (MsgWithSig‚àà pk (ver-signature ver) (msgPool st))
                         (Œª msg ‚Üí (ValidPartForPK (availEpochs st) (msgPart msg) pk))
     honestPartValid {e} {st} r {pk = pk} hpk v‚äÇm m‚ààpool ver
     -- We extract two pieces of important information from the place where the part 'v'
     -- was first sent: (a) there is a message with the same signature /in the current pool/
     -- and (b) its epoch is less than e.
        = Any-Step-elim (Œª { {st = step-epoch _} ()
                           ; {st = step-peer ps} (_ , new , valid) tr
                             ‚Üí  MsgWithSig‚àà-Step* tr new
                                , ValidPartForPK-stable tr
                                    (subst (Œª P ‚Üí ValidPartForPK _ P pk)
                                           (MsgWithSig‚àà-Step*-part tr new) valid)
                           })
                        (unwind r hpk v‚äÇm m‚ààpool ver)

     -- Unforgeability is also an important property stating that every part that is
     -- verified with an honest public key has either been sent by Œ± or is a replay
     -- of another message sent before.
     ext-unforgeability'
       : ‚àÄ{e Œ± m part pk}{st : SystemState e} ‚Üí ReachableSystemState st
       -- If a message m has been sent by Œ±, containing part
       ‚Üí (Œ± , m) ‚àà msgPool st ‚Üí part ‚äÇMsg m
       -- And the part can be verified with an honest public key,
       ‚Üí (sig : WithVerSig pk part) ‚Üí Meta-Honest-PK pk
       -- then either the part is a valid part by Œ± (meaning that Œ± can
       -- sign the part itself) or a message with the same signature has
       -- been sent previously.
       ‚Üí ValidPartForPK (availEpochs st) part pk
       ‚äé MsgWithSig‚àà pk (ver-signature sig) (msgPool st)
     ext-unforgeability' (step-s st (step-epoch ùìî)) m‚ààsm p‚äÜm sig hpk
       = ‚äé-map (ValidPartForPK-stable-epoch ùìî) id (ext-unforgeability' st m‚ààsm p‚äÜm sig hpk)
     ext-unforgeability' {part = part} (step-s st (step-peer {pid = Œ≤} {outs = outs} {pre = pre} sp)) m‚ààsm p‚äÜm sig hpk
       with Any-++‚Åª (List-map (Œ≤ ,_) outs) {msgPool pre} m‚ààsm
     ...| inj‚ÇÇ furtherBack = MsgWithSig‚àà-++ ≥ <‚äé$> (ext-unforgeability' st furtherBack p‚äÜm sig hpk)
     ...| inj‚ÇÅ thisStep
       with sp
     ...| step-cheat fm isCheat
       with thisStep
     ...| here refl
       with isCheat p‚äÜm sig
     ...| inj‚ÇÅ abs    = ‚ä•-elim (hpk abs)
     ...| inj‚ÇÇ sentb4 = inj‚ÇÇ (MsgWithSig‚àà-++ ≥ sentb4)
     ext-unforgeability' {m = m} {part = part} (step-s st (step-peer {pid = Œ≤} {outs = outs} {pre = pre} sp)) m‚ààsm p‚äÜm sig hpk
        | inj‚ÇÅ thisStep
        | step-honest x
       with Any-satisfied-‚àà (Any-map‚Åª thisStep)
     ...| (m , refl , m‚ààouts) = ‚äé-map proj‚ÇÅ MsgWithSig‚àà-++ ≥ (sps-avp st hpk x m‚ààouts p‚äÜm sig)

     -- The ext-unforgeability' property can be collapsed in a single clause.

     -- TODO-2: so far, ext-unforgeability is used only to get a MsgWithSig‚àà that is passed to
     -- msgWithSigSentByAuthor, which duplicates some of the reasoning in the proof of
     -- ext-unforgeability'; should these properties possibly be combined into one simpler proof?
     ext-unforgeability
       : ‚àÄ{e Œ±‚ÇÄ m part pk}{st : SystemState e} ‚Üí ReachableSystemState st
       ‚Üí (Œ±‚ÇÄ , m) ‚àà msgPool st ‚Üí part ‚äÇMsg m
       ‚Üí (sig : WithVerSig pk part) ‚Üí Meta-Honest-PK pk
       ‚Üí MsgWithSig‚àà pk (ver-signature sig) (msgPool st)
     ext-unforgeability {_} {Œ±‚ÇÄ} {m} {st = st} rst m‚ààsm p‚äÇm sig hpk
       with ext-unforgeability' rst m‚ààsm p‚äÇm sig hpk
     ...| inj‚ÇÅ p
        = mkMsgWithSig‚àà _ _ p‚äÇm Œ±‚ÇÄ m‚ààsm sig refl
     ...| inj‚ÇÇ sentb4 = sentb4

     ¬¨cheatForgeNew : ‚àÄ {e pid pk vsig mst outs m}{st : SystemState e}
                    ‚Üí (sp : StepPeer st pid mst outs)
                    ‚Üí outs ‚â° m ‚à∑ []
                    ‚Üí (ic : isCheat sp)
                    ‚Üí Meta-Honest-PK pk
                    ‚Üí MsgWithSig‚àà pk vsig ((pid , m) ‚à∑ msgPool st)
                    ‚Üí MsgWithSig‚àà pk vsig (msgPool st)
     ¬¨cheatForgeNew sc@(step-cheat fm isCheat) refl _ hpk mws
        with msg‚ààpool mws
     ...| there m‚ààpool = mkMsgWithSig‚àà (msgWhole mws) (msgPart mws) (msg‚äÜ mws) (msgSender mws) m‚ààpool (msgSigned mws) (msgSameSig mws)
     ...| here m‚ààpool
        with isCheat (subst (msgPart mws ‚äÇMsg_) (cong proj‚ÇÇ m‚ààpool) (msg‚äÜ mws)) (msgSigned mws)
     ...| inj‚ÇÅ dis = ‚ä•-elim (hpk dis)
     ...| inj‚ÇÇ mws' rewrite msgSameSig mws = mws'

     msgWithSigSentByAuthor : ‚àÄ {e pk sig}{st : SystemState e}
                            ‚Üí ReachableSystemState st
                            ‚Üí Meta-Honest-PK pk
                            ‚Üí MsgWithSig‚àà pk sig (msgPool st)
                            ‚Üí Œ£ (MsgWithSig‚àà pk sig (msgPool st))
                                Œª mws ‚Üí ValidPartForPK (availEpochs st) (msgPart mws) pk
     msgWithSigSentByAuthor step-0 _ ()
     msgWithSigSentByAuthor (step-s {pre = pre} preach (step-epoch ùìî)) hpk mws
       rewrite step-epoch-does-not-send pre ùìî
          with msgWithSigSentByAuthor preach hpk mws
     ...| mws' , vpb =  mws' , ValidPartForPK-stable {st = pre} (step-s step-0 (step-epoch ùìî)) vpb
     msgWithSigSentByAuthor {pk = pk} (step-s {pre = pre} preach (step-peer theStep@(step-cheat fm cheatCons))) hpk mws
        with (¬¨cheatForgeNew theStep refl unit hpk mws)
     ...| mws'
        with msgWithSigSentByAuthor preach hpk mws'
     ...| mws'' , vpb'' = MsgWithSig‚àà-++ ≥ mws'' , vpb''
     msgWithSigSentByAuthor {e} (step-s {pre = pre} preach (step-peer {pid = pid} {outs = outs} (step-honest sps))) hpk mws
       with Any-++‚Åª (List-map (pid ,_) outs) {msgPool pre} (msg‚ààpool mws)
     ...| inj‚ÇÇ furtherBack
       with msgWithSigSentByAuthor preach hpk (MsgWithSig‚àà-transp mws furtherBack)
     ...| mws' , vpb' =  MsgWithSig‚àà-++ ≥ mws' , vpb'

     msgWithSigSentByAuthor {e} (step-s {pre = pre} preach (step-peer {pid = pid} {outs = outs} (step-honest sps))) hpk mws
        | inj‚ÇÅ thisStep
        with Any-satisfied-‚àà (Any-map‚Åª thisStep)
     ...| (m' , refl , m‚ààouts)
        with sps-avp preach hpk sps m‚ààouts (msg‚äÜ mws) (msgSigned mws)
     ...| inj‚ÇÅ (vpbŒ±‚ÇÄ , _) = mws , vpbŒ±‚ÇÄ
     ...| inj‚ÇÇ mws'
        with msgWithSigSentByAuthor preach hpk mws'
     ...| mws'' , vpb'' rewrite sym (msgSameSig mws) = MsgWithSig‚àà-++ ≥ mws'' , vpb''
