#+TITLE: Formal verification of the LibraBFT consensus algorithm
#+SUBTITLE: An overview of proving contracts for peer handlers
#+AUTHOR: Chris Jenkins
#+DATE: 2021 Aug 11

* Metadata

  This file was written with respect to the following commit hash of the
  repository:
  - 2697125876ba4f02a7904867db50be8ddb331f80

* Structure of peer handler proofs

  In both the Haskell prototype and Agda model, peer handler code is written in
  the =RWST= --- /reader, writer, state/ --- and =EitherD= monads. Unlike the
  Haskell code, in Agda, these monads are [[file:LibraBFT/ImplShared/Util/RWST.agda::data RWST (Ev Wr St : Set) : Set → Set₁ where][defined as a special-purpose datatypes]]
  (in , defined in
  ~LibraBFT.ImplShared.Util.Dijkstra.RWST~ and ~LibraBFT.ImplShared.Util.Dijkstra.EitherD~, respectively).
  This allows proofs to inspect the AST of peer handler code directly.

  For =RWST=, this is primarily used to compute, for any
  postcondition =Q : (Wr St A : Set) -> Set= and peer handler =h : RWST Wr St
  A=, the weakest precondition =RWST-weakestPre m Q= which can be used to prove
  =Q=. This is based on Dijsktra's weakest precondition calculus and the work by
  Swamy et al. on the [[file:LibraBFT/ImplShared/Util/RWST.agda::{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.][Dijkstra monad]]. Phrasing properties about peer handlers as
  preconditions has a number of benefits, described below.

  
** Dijkstra's weakest precondition calculus

   [[file:LibraBFT/ImplShared/Util/Dijkstra/RWST.agda]] 

   There are two kinds of constructors of the Agda =RWST= monad: primitives
   needed to support the desired functionality, and conveniences that allow us
   to define custom proof obligations for branching code.

   #+begin_src agda
-- RWST, the AST of computations with state `St` reading from an environment
-- `Ev` and producing a list of outputs of type `Wr`
data RWST (Ev Wr St : Set) : Set → Set₁ where
  -- Primitive combinators
  RWST-return : ∀ {A}   → A                                     → RWST Ev Wr St A
  RWST-bind   : ∀ {A B} → RWST Ev Wr St A → (A → RWST Ev Wr St B) → RWST Ev Wr St B
  RWST-gets   : ∀ {A} → (St → A)                                → RWST Ev Wr St A
  RWST-put    : St                                              → RWST Ev Wr St Unit
  RWST-ask    :                                                   RWST Ev Wr St Ev
  RWST-tell   : List Wr                                         → RWST Ev Wr St Unit

  -- Branching combinators (used for creating more convenient contracts)
  RWST-if     : ∀ {A} → Guards (RWST Ev Wr St A)                → RWST Ev Wr St A
  RWST-either : ∀ {A B C} → Either B C
               → (B → RWST Ev Wr St A) → (C → RWST Ev Wr St A)   → RWST Ev Wr St A
  RWST-ebind  : ∀ {A B C}
               → RWST Ev Wr St (Either C A)
               → (A → RWST Ev Wr St (Either C B))               → RWST Ev Wr St (Either C B)
  RWST-maybe  : ∀ {A B} → Maybe B
               → (RWST Ev Wr St A) → (B → RWST Ev Wr St A)       → RWST Ev Wr St A
   #+end_src

   There are two steps in the development for the weakest precondition calculus.

*** Computing the weakest precondition

    From a peer handler =m= and postcondition =P= we compute (using a large
    elimination) a precondition =RWST-weakestPre m P=.

    - This is easy to see for =RWST-pure=

        #+begin_src agda
RWST-weakestPre (RWST-return x) P ev pre = P x pre []
        #+end_src

      That is, the post condition must already hold for the returned value and
      prestate with no outputs. Here, =ev= is the environment we read from and
      =pre= is the prestate.

    - The case for =RWST-bind= is trickier

        #+begin_src agda
RWST-weakestPre (RWST-bind m f) P ev pre =
  RWST-weakestPre m (RWST-weakestPre-bindPost ev f P) ev pre
{- ... -}

RWST-Post++ P outs x post outs₁ = P x post (outs ++ outs₁)

RWST-weakestPre-bindPost ev f P x post outs =
  ∀ r → r ≡ x → RWST-weakestPre (f r) (RWST-Post++ P outs) ev post
        #+end_src

      - We want the weakest precondition for =m= of a postcondition for =m= that
        will guarantee that running =f= on the result of =m= gives us the
        desired final postcondition =P= of =RWST-bind m f=.

        The postcondition of =m= which is also the precondition for running
        =f= on the result of =m= is =RWST-weakestPre-bindPost ev f P=

      - In =RWST-weakestPre-bindPost=, =x= is the result of running =m=, =post=
        is the poststate, and =outs= is the list of outputs =m= generated.

      - We introduce a new variable =r= to serve as an alias for the result
        =x=.

        In proofs, the variable =x= may be instantiated with some very large
        and complicated expression, and substituting it directly into the
        desired precondition could cause the proof state to become quite
        unreadable. Introducing an alias allows the prover (e.g., you!) to use
        the same name as used in the peer handler code itself, and only reveal
        what it actually computes to where that information is needed.

      - Finally, we want the weakest precondition of =P= for =f r=, but now
        =P= must hold not only for the outputs of =f r= but also the
        previously generated outputs, =outs=.

        We therefore use the helper function =RWST-Post++=.

    - Now we look at a case for one of the "convenience" constructors ---
      =RWST-maybe=

      #+begin_src agda
RWST-weakestPre (RWST-maybe m f₁ f₂) P ev pre =
  (m ≡ nothing → RWST-weakestPre f₁ P ev pre)
  × (∀ j → m ≡ just j → RWST-weakestPre (f₂ j) P ev pre)
      #+end_src

      - Here, we decompose the precondition into two subgoals: one where
        =m : Maybe A= is =nothing= (and so we need that the weakest precondition
        of =P= holds for =f₁=) and one where there is a =j= such that =m ≡ just
        j=.

      - By phrasing it this way, we get help from Agda: in proofs, instead of
        having to do case analysis on =m= ourselves (which might be quite a
        complicated expression), Agda can automatically refine (using =C-c C-r=,
        or =C-c C-c= for copattern matching) the goal to these two subgoals when
        the expression we are considering is formed by =RWST-maybe=
    
*** Proving a contract from its weakest precondition

    For the top-level peer handlers (process proposal, process vote), once we
    have proven the weakest precondition for the desired postcondition, the next
    step is to use this to extract that post condition. This is done with
    =RWST-contract= below:

    #+begin_src agda
RWST-Post-True : (P : RWST-Post Wr St A) (m : RWST Ev Wr St A) (ev : Ev) (pre : St) → Set
RWST-Post-True P m ev pre =
  let (x , post , outs) = RWST-run m ev pre in
  P x post outs

RWST-Contract : (m : RWST Ev Wr St A) → Set₁
RWST-Contract{Ev}{Wr}{St}{A} m =
  (P : RWST-Post Wr St A)
  → (ev : Ev) (pre : St) → RWST-weakestPre m P ev pre
  → RWST-Post-True P m ev pre

RWST-contract : (m : RWST Ev Wr St A) → RWST-Contract m
    #+end_src

    1. =RWST-Post-True= says what it means for a post condition =P= to be
       true of a peer handler =m= running in environment =ev= with prestate =pre=

    2. =RWST-Contract= is the statement that it suffices to show the weakest
       precondition of =P= for =m= if you want that the =P= holds for =m=

    3. =RWST-contract= is the proof of the above statement


    There is an example of using =RWST-contract= in
    [[file:LibraBFT/Impl/IO/OBM/InputOutputHandlers.agda]].  (Note that `LBFT`, defined in
    ~LibraBFT.ImplShared.Util.Util~ is `RWST` instantiated with the types used to express our Agda
    implementation of `LibraBFT`; for convenience, we often have `LBFT` variants of `RWST`
    definitions and proofs.)
    
*** Postcondition implication

    Sometimes when proving a precondition, it is convenient to show
    directly that one postcondition implies another. For example, suppose we
    have peer handlers =foo=, =bar=, and =baz=, we have proved =ContractFoo=
    and =ContractBar=, and we are trying to prove =ContractBaz= where =baz= is:

    #+begin_src haskell
      baz = do
        x <- foo
        bar x
    #+end_src

    We may wish to show that =ContractFoo= implies the postcondition
    =RWST-weakestPre-bindPost ev bar ContractBaz=. The lemma =RWST-⇒= serves
    just this purpose.

    #+begin_src agda
RWST-Post-⇒ : (P Q : RWST-Post Wr St A) → Set
RWST-Post-⇒ P Q = ∀ r st outs → P r st outs → Q r st outs

-- This helper function is primarily used to take a proof concerning one
-- computation `m` and show that that proof implies a property concerning a
-- larger computation that contains `m`.
RWST-⇒
  : (P Q : RWST-Post Wr St A) → (RWST-Post-⇒ P Q)
    → ∀ m (ev : Ev) st → RWST-weakestPre m P ev st → RWST-weakestPre m Q ev st
    #+end_src

    This is such a common pattern that contracts for
    non-toplevel handlers should generally formulated for
    arbitrary postconditions (=pre= is a module parameter):

    #+begin_src agda
    contract' : LBFT-weakestPre baz ContractBaz pre

    contract : ∀ Post → (RWST-Post-⇒ ContractBaz Post) → LBFT-weakestPre baz Post pre
    contract Post pf = LBFT-⇒ ContractBaz Post pf baz pre contract'
    #+end_src
    
** Peer handler proofs
   
*** Breaking the peer handler down into smaller "steps"

    When beginning to prove a contract for a peer handler, it is often
    useful to break the handler into smaller steps, for two reasons:
    1. It helps to declutter the proof state, so you can orient yourself on what
       you still need to show.

    2. It allows you to break the proof down into smaller pieces as well, making
       it more readable. The types of these smaller proofs will mention the code
       that remains to execute, so save yourself some typing by using
       short names like =step3 <args>=.


    Let's look at =ensureRoundAndSyncUpM= as an example.

    #+begin_src agda
module ensureRoundAndSyncUpM
  (now : Instant) (messageRound : Round) (syncInfo : SyncInfo) (author : Author) (helpRemote : Bool) where
  step₀ : LBFT (Either ErrLog Bool)
  step₁ : LBFT (Either ErrLog Bool)
  step₂ : LBFT (Either ErrLog Bool)

  step₀ = do
    currentRound ← use (lRoundState ∙ rsCurrentRound)
    ifD messageRound <? currentRound
      then ok false
      else step₁

  step₁ =
        syncUpM now syncInfo author helpRemote ∙?∙ λ _ → step₂

  step₂ = do
          currentRound' ← use (lRoundState ∙ rsCurrentRound)
          ifD messageRound /= currentRound'
            then bail fakeErr -- error: after sync, round does not match local
            else ok true

ensureRoundAndSyncUpM = ensureRoundAndSyncUpM.step₀
    #+end_src

    Generally speaking, it's good to choose the boundaries of these steps around
    any point that branches, and at any point where another function is called
    (such as =syncUpM=) so you can use the contract for that function to "move"
    to the next step. This is shown below for a part of the proof of the
    contract for =ensureRoundAndSyncUpM= (found in [[file:LibraBFT/Impl/Consensus/RoundManager/Properties.agda]]):

    #+begin_src agda
      contract-step₁
        : RWST-weakestPre (syncUpM now syncInfo author helpRemote)
            (RWST-weakestPre-ebindPost unit (const step₂) Contract)
            unit pre
      contract-step₁ = syncUpMSpec.contract now syncInfo author helpRemote pre Post contract-step₁'
        where
        Post = RWST-weakestPre-ebindPost unit (const step₂) Contract
    #+end_src

    Here, =Contract= is the contract we want to show. =Post= is the postcondition
    we want for =syncUpM= --- which is the weakest precondition for =const
    step₂= that gives us =Contract=.

    
*** Using =abstract= blocks

    When completely normalized (i.e., evaluated as much as they can be by Agda's
    typechecker), many peer handler functions are *quite* large. That means
    there can be quite a lot of clutter to read through while proving. One way
    to reduce this is by using Agda's =abstract= blocks, which prevent Agda from
    unrolling a definition beyond that block.

    =processProposalMsgM= (an external entry point to =RoundManager.agda=) is an
    example of this.

    #+begin_src agda
abstract
  processProposalMsgM = processProposalMsgM.step₀

  processProposalMsgM≡ : processProposalMsgM ≡ processProposalMsgM.step₀
  processProposalMsgM≡ = refl
    #+end_src

    The defintion of =processProposalMsgM.step₀= /is/ visible in other contexts,
    so =processProposalMsgM≡= is used by the proof of the contract for
    =processProposalMsgM= to transfer a property about
    =processProposalMsgM.step₀= to =processProposalMsgM=.

    At the time of writing, there is no set discipline for when to use
    =abstract= blocks. Conceivably, they could be used for *every* function,
    since this would greatly improve the readability of the proof state for any
    peer handler contract proof.

    
*** =EitherLike=

    To take advantage of the weakest precondition infrastructure, peer handler
    code written in the =Either ErrLog= monad in Haskell is (or will be) written
    in the =EitherD ErrLog= monad. To facilitate writing code to operate on both
    =Either= or =EitherD=, ~LibraBFT.Prelude~ defines a typeclass =EitherLike=.

    #+begin_src agda
  -- Utility to make passing between `Either` and `EitherD` more convenient
  record EitherLike {ℓ₁ ℓ₂ ℓ₃} (E : Set ℓ₁ → Set ℓ₂ → Set ℓ₃) : Set (ℓ+1 (ℓ₁ ℓ⊔ ℓ₂ ℓ⊔ ℓ₃)) where
    field
      fromEither : ∀ {A : Set ℓ₁} {B : Set ℓ₂} → Either A B → E A B
      toEither   : ∀ {A : Set ℓ₁} {B : Set ℓ₂} → E A B → Either A B
  open EitherLike ⦃ ... ⦄ public
    #+end_src

    With this, operations for branching (such as =case⊎D_of_=) can be defined to
    operate over anything that is =EitherLike=.

    The one wrinkle in this story is the monadic bind operation. When writing
    "m >>= f" in the =EitherD ErrLog= monad, =f= must return something of the form
    =EitherD ErrLog B=, and similarly for the =Either ErrLog= monad.

    At the time of writing, the recommendation for =EitherD= peer handler code
    is:
    - write the steps in =EitherD=
      e.g., =executeAndInsertBlockE.step₀ : BlockStore → Block → EitherD ErrLog (BlockStore × Block)=
    - use ~toEither~ to create a version of the function in =Either=, which will be used by =LBFT= peer handlers
      e.g., =executeAndInsertBlockE bs block = toEither $ executeAndInsertBlockE.step₀ bs block=

    - write a variant in =EitherD= again, to be used by other =EitherD=
      handlers

      e.g. =executeAndInsertBlockE₀ bs block = fromEither executeAndInsertBlockE bs block=


    Note that this third version is not the same as the first, even though it
    has the same type signature. While =step₀= may have many uses of binds and
    branching, =executeAndInsertBlockE₀= will only ever be an =EitherD-return=
    or =EitherD-bail=. This has the side effect of reducing clutter in the proof
    state for any contract of an =EitherD= handler that calls
    =executeAndInsertBlockE₀=.
